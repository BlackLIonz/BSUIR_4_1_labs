<!DOCTYPE html>
<html>
<head>
    <title>Тема 5 Потоки в сетях</title>
    <meta http-equiv="Content-Language" content="ru" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <link rel="stylesheet" type="text/css" href="../../css/textStyle.css">
	<script type="text/javascript" src="http://latex.codecogs.com/latexit.js"></script>
</head>
<body>
    <div title="top" class="div-p-top">
        <h1 class="Top">
            <a href="../lk3/lk3.htm">[предыдущая тема]</a>
            <a href="../../theory.htm">[оглавление]</a>
            <a href="../lk5/lk5.htm">[следующая тема]</a>
        </h1>
        <hr>
        <p>&nbsp;</p>
        <h1>Тема 5 Потоки в сетях</h1>
        <p>&nbsp;</p>
        <hr>
        <p>&nbsp;</p>
    </div>
	
	<p>
		&emsp;<a href="#t4.1">5.1 Примеры задач, которые имеют сетевую форму</a><br>
		&emsp;&emsp;<a href="#t4.1.1">5.1.1 Классическая транспортная задача (в матричной форме)</a><br>
		&emsp;&emsp;<a href="#t4.1.2">5.1.2 Сетевая модель транспортной задачи (задача о потоке минимальной стоимости)</a><br>
		&emsp;&emsp;<a href="#t4.1.3">5.1.3 Многопродуктовая транспортная задача</a><br>
		&emsp;&emsp;<a href="#t4.1.4">5.1.4 Задача о построении дерева кратчайших путей из заданного узла s</a><br>
		&emsp;&emsp;<a href="#t4.1.5">5.1.5 Задача о расчёте минимального времени выполнения комплекса работ (задача о критическом пути из s в t)</a><br>
		&emsp;&emsp;<a href="#t4.1.6">5.1.6 Задача о назначениях</a><br>
		&emsp;&emsp;<a href="#t4.1.7">5.1.7 Задача коммивояжёра</a><br>
		&emsp;&emsp;<a href="#t4.1.8">5.1.8 Задача о максимальном потоке</a><br>
		&emsp;<a href="#t4.2">5.2 Задача о максимальном потоке</a><br>
		&emsp;&emsp;<a href="#t4.2.1">5.2.1 Связь задачи о максимальном потоке с задачей о потоке минимальной стоимости</a><br>
		&emsp;&emsp;<a href="#t4.2.2">5.2.2 Максимальный поток и минимальный разрез</a><br>
		&emsp;&emsp;<a href="#t4.2.3">5.2.3 Метод Форда-Фалкерсона (построение максимального потока)</a><br>
		&emsp;&emsp;<a href="#t4.2.4">5.2.4 Пример</a><br>
		&emsp;<a href="#t4.3">5.3 Задача о назначениях</a><br>
		&emsp;&emsp;<a href="#t4.3.1">5.3.1 Постановка задачи</a><br>
		&emsp;&emsp;<a href="#t4.3.2">5.3.2 Венгерский метод</a><br>
		&emsp;&emsp;<a href="#t4.3.3">5.3.3 Пример</a><br>
		&emsp;<a href="#t4.4">5.4 Задача коммивояжера</a><br>
		&emsp;&emsp;<a href="#t4.4.1">5.4.1 Постановка задачи</a><br>
		&emsp;&emsp;<a href="#t4.4.2">5.4.2 Первая модификация (метод исключения подциклов)</a><br>
		&emsp;&emsp;<a href="#t4.4.3">5.4.3 Пример 1</a><br>
		&emsp;&emsp;<a href="#t4.4.4">5.4.4 Вторая модификация (метод задания маршрутов)</a><br>
		&emsp;&emsp;<a href="#t4.4.5">5.4.5 Пример 2</a><br>
		&emsp;&emsp;<a href="#t4.4.6">5.4.6 Пример 3</a><br>

	</p>
	
	<style>
        img {
            vertical-align: middle;
          
        }
    </style>
  <div style="font-size: 14pt;">
	<div align="justify" style="font-size: 14pt;">
	<br>
	&emsp;Популярность сетевых оптимизационных моделей, 
  которые обычно являются частными случаями моделей ЛП, можно объяснить прежде 
  всего следующими причинами.
  <br>
   &emsp;Часто они относятся к задачам распределения продукции. 
  Следовательно, модели этого класса имеют экономический смысл для многих промышленных 
  фирм и предприятий. Кроме того, математическая структура сетей идентична структуре 
  других оптимизационных моделей, на первый взгляд не имеющих с ними ничего общего. 
  Однако указанные две причины не могут служить основанием для выделения сетевых 
  моделей в качестве предмета специального изучения. <br>
 &emsp;Важнейшей причиной, обуславливающей целесообразность 
  такого выделения, являются особенности математических характеристик сетевых 
  моделей. Используя эти особенности, можно существенно повысить эффективность 
  процесса отыскания оптимальных решений задач, которые удаётся описать на "сетевом 
  языке". В реальных примерах сетевые модели часто содержат тысячи переменных 
  и сотни ограничений. В связи с этим применение эффективных методов становится 
  не только выгодным, но просто необходимым.
  <br>
 &emsp;Наконец, исследуя сети, можно убедиться, что разнообразные, 
  на первый взгляд, совершенно непохожие оптимизационные модели допускают применение 
  общего метода, что, несомненно, обеспечивает существенные преимущества.
<br>
<br>
<br>
  	<p class="title"><a name="t4.1"><b>5.1 Примеры задач, которые имеют сетевую форму</b></a></p>
    <p class="title"><a name="t4.1.1"><b>5.1.1. Классическая транспортная задача (в матричной форме)</b></a></p>



<br>
	&emsp; Имеется <div* lang="latex">n</div*> пунктов производства некоторого (одного) продукта. 
Обозначим через <div* lang="latex">a_i</div*> объём производства продукта в <div* lang="latex">i </div*> пункте производства, <div* lang="latex">i=\overline{1,n}.</div*> 
Имеется  <div* lang="latex">m</div*> пунктов потребления этого продукта. Обозначим через  <div* lang="latex"> b_j </div*> объём потребления продукта в 
<div* lang="latex">j </div*>-м пункте потребления, <div* lang="latex">j=\overline{1,m}</div*>.

Перевозка единицы продукции из <div* lang="latex">i</div*>-го пункта производства в <div* lang="latex">j</div*>-й пункт 
потребления стоит <div* lang="latex">c_{ij} ,\; i=\overline{1,n},{\rm \; \; \; }j=\overline{1,m}.</div*> Требуется составить
 такой план перевозок продукта от пунктов производства в пункты потребления, чтобы:


<br>
	&emsp;  1) вывести весь продукт из каждого пункта производства;

<br>
	&emsp;  2) удовлетворить спрос каждого пункта потребления;

<br>
	&emsp;  3) минимизировать общую стоимость перевозок.

<br>
	&emsp; Обозначим через <div* lang="latex">x_{ij} </div*> объём продукта, перевозимый из <div* lang="latex">i</div*>-го пункта производства в
 <div* lang="latex">j</div*>-й пункт потребления. Математическая модель задачи состоит в следующем: найти такой план перевозок 
<div* lang="latex">x=(x_{ij} ,\; i=\overline{1,n}\; ,\; j=\overline{1,m})</div*>, чтобы


<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(1)">
<div lang="latex" align="center">
\sum _{i=1}^{n} \sum _{j=1}^{m}c_{ij} x_{ij}  \to \min ,
</div>
 </td>
      <td width="2%">(1)</td>
    </tr>
  </table>

<br>


<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(2)">
<div lang="latex" align="center">
\sum _{j=1}^{m}x_{ij}  =a_{i} ,{\rm \; \; \; }i=\overline{1,n;}\quad \sum _{i=1}^{n}x_{ij}  =b_{j} ,\quad j=\overline{1,m},
</div>
 </td>
      <td width="2%">(2)</td>
    </tr>
  </table>

<br>


<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(3)">
<div lang="latex" align="center">
x_{ij} \ge 0,\quad i=\overline{1,n};\quad j=\overline{1,m}.
</div>
 </td>
      <td width="2%">(3)</td>
    </tr>
  </table>

<br>

<br>
	&emsp; Иногда в условия задачи добавляют ещё одно требование: объём перевозки продукта из <div* lang="latex">i</div*>-го пункта производства 
в <div* lang="latex">j</div*>-й пункт потребления не должен превышать заданного числа <div* lang="latex">d_{ij}>0</div*>. 
В этом случае ограничение <a href="#(3)">(3)</a> заменяется ограничением

<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(3')">
<div lang="latex" align="center">0\le x_{ij} \le d_{ij} ,\quad i=\overline{1,n};\quad j=\overline{1,m}.   
</div>
 </td>
      <td width="2%">(3')</td>
    </tr>
  </table>

<br>
<br>
	&emsp; Задача <a href="#(1)">(1)</a> -- <a href="#(3)">(3)</a> и метод её решения (метод потенциалов) были рассмотрены в 
 курсе "Методы оптимизации и управления".

<br>
&emsp; Метод решения задачи <a href="#(1)">(1)</a>, <a href="#(2)">(2)</a>, <a href="#(3')">(3')</a> 
легко получить из метода решения задачи <a href="#(1)">(1)</a> -- <a href="#(3)">(3)</a>, зная правила симплекс-метода для задачи ЛП с двухсторонними ограничениями на переменные.



<br>
<br>
<p class="title"><a name="t4.1.2"><b>5.1.2 Сетевая модель транспортной задачи (задача о 
  потоке минимальной стоимости)</b></a></p>

<br>
	&emsp; Большое значение имеет обобщение классической транспортной задачи путём включения в неё случаев, когда некоторые пункты являются транзитными.

<br>
	&emsp; Имеется <div* lang="latex">n</div*> пунктов<div* lang="latex">i \in I = \{1,2,\dots ,{n}\},</div*>  которые связаны между собой системой
 дорог, которую удобно представлять в виде набора пар

<br> <br> <div lang="latex" align="center">\left(i,j\right)\in \, \, \, U\subset {\rm \{ }\left(i,j\right),\, 
\, \, i=\overline{1,n},\, \, j=\overline{1,n}\, {\rm \} .}\quad  </div> <br> <br>

Если пара <div* lang="latex">(i,j)\in U</div*>, то это означает, что есть дорога из <div* lang="latex">i</div*>  в
 <div* lang="latex">j.</div*> (Но это ещё не означает, что есть дорога из <div* lang="latex">j</div*> в <div* lang="latex">i</div*>. 
Для существования такой дороги надо, чтобы существовала дуга <div* lang="latex">(j,i)\in U</div*>!) 


<br>
	&emsp; Все пункты <div* lang="latex">i\in I</div*>  делятся на непересекающиеся три группы:
<br> <br> <div lang="latex" align="center">I=I_+ \bigcup I_- \bigcup I_{0} , </div> <br> <br>


где   <div* lang="latex">I_+</div*> -- пункты производства; обозначим через <div* lang="latex">a_i>0</div*> объёмы производства в этих пунктах;

<br>
	&emsp; <div* lang="latex">I_-</div*> -- пункты потребления; обозначим через <div* lang="latex">a_i<0</div*>  объёмы потребления в этих пунктах;

<br>
	&emsp; <div* lang="latex">I_0</div*> -- транзитные пункты, для них <div* lang="latex">a_i=0</div*>.

<br>
	&emsp;  Числа <div* lang="latex">a_i,\; i \in I,</div*> называются интенсивностями узлов <div* lang="latex">i \in I.</div*>

<br>
	&emsp; Обозначим через <div* lang="latex"> c_{ij} , \; (i,j)\in U,</div*> стоимость перевозки единицы продукции по дороге <div* lang="latex">(i,j)</div*> из 
 <div* lang="latex">i</div*>  в <div* lang="latex">j.</div*>

<br>
	&emsp; Требуется так организовать перевозки от пунктов производства к пунктам потребления, чтобы:

<br>
<br>
	&emsp;  1) для каждого пункта соблюдалось условие баланса:


<br>
	&emsp; -- для пункта производства -- сумма произведённого продукта плюс сумма введённого продукта равны сумме вывезенного продукта;

-- для  пункта  потребления -- сумма  ввезенного  продукта  равна  потреблённому продукту плюс сумма вывезенного продукта;

<br>
	&emsp; -- для транзитного пункта -- сумма ввезённого продукта равна сумме вывезенного продукта;

<br>
<br>
	&emsp;  2) суммарная стоимость всех перевозок была минимальна.

<br>
<br>
	&emsp; Обозначим через <div* lang="latex">x_{ij} </div*> объём перевозки по дуге <div* lang="latex">(i,j)</div*>. Тогда математическая модель задачи имеет вид
<br>
<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(4)">
<div lang="latex" align="center">
\sum _{\left(i,j\right)\in U}c_{ij}  x_{ij} \to \min ,
</div>
 </td>
      <td width="2%">(4)</td>
    </tr>
  </table>

<br>


<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(5)">
<div lang="latex" align="center">
\sum _{j\in I_{i}^{+} }x_{ij}  -\sum _{j\in I_{i}^{-} }x_{ji}  =a_{i} ,\quad i\in I,
</div>
 </td>
      <td width="2%">(5)</td>
    </tr>
  </table>

<br>


<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(6)">
<div lang="latex" align="center">
x_{ij} \ge 0,\quad (i,j)\in U.
</div>
 </td>
      <td width="2%">(6)</td>
    </tr>
  </table>

<br>

<br>
	&emsp; К сформулированной выше задаче можно добавить ещё одно условие: объём перевозки по дороге <div* lang="latex">(i,j)</div*> не
 должен превышать числа <div* lang="latex">d_{ij}.</div*>  Тогда ограничение 
 <a href="#(6)">(6)</a> заменяется на ограничение

<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(6')">
<div lang="latex" align="center">0\le x_{ij} \le d_{ij} ,\quad (i,j)\in U. 
   </div>
 </td>
      <td width="2%">(6')</td>
    </tr>
  </table>

<br>

Задача <a href="#(4)">(4)</a>, <a href="#(5)">(5)</a>, <a href="#(6')">(6')</a> называется задачей о потоке минимальной 
стоимости с ограничениями на пропускные способности дуг.
Методы решения задачи <a href="#(4)">(4)</a> -- <a href="#(6)">(6)</a> рассмотрены в <a href="../lk6/lk6.htm">[Задача о потоке минимальной стоимости]</a>.



<br>
<br>

<p class="title"><a name="t4.1.3"><b>5.1.3 Многопродуктовая транспортная задача</b></a></p>

<br>
	&emsp; В задачах, описанных в пп.~1, 2,
 речь шла о перевозках одного вида продукта из пунктов производства в пункты потребления.
 Можно рассматривать аналогичные задачи, в которых речь идёт о нескольких видах продуктов.
<br>
	&emsp;Рассмотрим двухпродуктовую задачу.

<br>
	&emsp;Пусть есть пункты <div* lang="latex">i \in I</div*>, связанные сетью дорог <div* lang="latex">(i,j)\in U.</div*> Каждая дорога
 <div* lang="latex">(i,j)\in U</div*>  имеет ограниченную пропускную способность <div* lang="latex">d_{ij} ,\, \, (i,j)\in U.</div*>

<br>
	&emsp;Для каждого пункта <div* lang="latex">i \in I</div*> заданы два числа <div* lang="latex">a_{i} ,\, \, b_{i} </div*>:

<br>
	&emsp;<div* lang="latex">a_{i} </div*>  -- интенсивность узла (пункта) <div* lang="latex">i</div*>  по первому продукту 
(если <div* lang="latex">a_{i} > 0, </div*> то первый продукт производится в <div* lang="latex">i</div*>; если <div* lang="latex">a_{i} &lt; 0,</div*>
 то первый продукт потребляется в <div* lang="latex">{i} </div*>; если <div* lang="latex">a_{i} </div*> = 0, то пункт <div* lang="latex">i </div*> --
 транзитный по первому продукту);

<br>
	&emsp;<div* lang="latex">b_{i} }</div*> -- интенсивность узла (пункта) <div* lang="latex">i</div*> по второму продукту
 (если <div* lang="latex">b_{i} >0</div*>, то второй продукт производится в <div* lang="latex">i</div*>; если <div* lang="latex">b_{i}&lt; 0,</div*>,
то второй продукт потребляется в <div* lang="latex">i</div*>, если <div* lang="latex">b_{i} = 0,</div*> то 
<div* lang="latex">i</div*>  -- транзитный пункт по второму продукту).

<br>
	&emsp;Заданы числа <div* lang="latex">c_{ij} ,\, \, f_{ij} </div*> -- стоимость перевозки единицы продукции первого
 и второго видов по дуге <div* lang="latex">(i,j)\in U.</div*>
 Требуется найти план перевозок продукции первого и второго вида, такой, что:

<br>
	&emsp;1) для каждого узла выполняются условия баланса по продукции первого и второго видов;

<br>
	&emsp;2) суммарный объём перевозок продукции первого и второго видов по дуге <div* lang="latex">(i,j)</div*> не 
превосходит её пропускной способности <div* lang="latex">d_{ij} </div*>;

<br>
	&emsp;3) суммарная стоимость перевозок продукции двух видов минимальная.

<br>
	&emsp;Обозначим через <div* lang="latex">x_{ij} </div*> и <div* lang="latex">y_{ij} </div*> объёмы перевозок первого 
и второго видов продукции по дуге <div* lang="latex">(i,j)</div*>.
 Математическая модель двухпродуктовой транспортной задачи имеет вид
<br> <br> <div lang="latex" align="center">\sum _{\left(i,j\right)\in U}c_{ij}  x_{ij} +\sum _{\left(i,j\right)\in U}f_{ij}  y_{ij} \to \min , </div> <br> <br>
<br> <br> <div lang="latex" align="center">\sum _{j\in I_{i}^{+} }x_{ij}  -\sum _{j\in I_{i}^{-} }x_{ji}  =a_{i} ,\quad i\in I, </div> <br> <br>
<br> <br> <div lang="latex" align="center">\sum _{j\in I_{i}^{+} }y_{ij}  -\sum _{j\in I_{i}^{-} }C_{ji}  =b_{i} ,\quad i\in I; </div> <br> <br>
<br> <br> <div lang="latex" align="center">x_{ij} \ge 0,\quad y_{ij} \ge 0,\quad x_{ij} +y_{ij} \le d_{ij} ,\quad \left(i,j\right)\in U. </div> <br> <br>
Последнее ограничение кажется малосущественным, однако именно оно значительно усложняет решение последней задачи по сравнению с аналогичной однопродуктовой задачей 
<a href="#(4)">(4)</a>, <a href="#(5)">(5)</a>, <a href="#(6')">(6')</a>. Методы решения двухпродуктовой транспортной задачи описаны в [3].



<br>
<br>
<p class="title"><a name="t4.1.4"><b>5.1.4 Задача о построении дерева кратчайших путей 
  из заданного узла s</b></a></p>



 <br>
	&emsp;Эта задача подробно описана в <a href="../lk3/lk3.htm">[Кратчайшие пути]</a>. 
Там же отмечалось, что она -- частный случай задачи <a href="#(4)">(4)</a> -- <a href="#(6)">(6)</a> с интенсивностями узлов, заданными следующим образом:
<br> <br> <div lang="latex" align="center">a_{s} =n-1,\quad a_{i} =-1,\quad i\in I\backslash  s \} }. </div> <br> <br>

<br>
	&emsp;Методов решения задачи о построении дерева кратчайших путей описаны также <a href="../lk3/lk3.htm">[Кратчайшие пути]</a>. .



<br>
<br>
<p class="title"><a name="t4.1.5"><b>5.1.5 Задача о расчёте минимального времени выполнения 
  комплекса работ (задача о критическом пути из s в t)</b></a></p>
 <br>
	&emsp;Математическая модель этой задачи описана <a href="../lk2/lk2.htm">[Динамическое программирование]</a>.  Там же показано, что эта задача -- частный случай задачи
<a href="#(4)">(4)</a> -- <a href="#(6)">(6)</a>, когда min заменяем на max и

<br> <br> <div lang="latex" align="center">a_{s} =1,\quad a_{t} =-1,\quad a_{i} =0,\quad i\in I\backslash {\rm \{ }s,t{\rm \; \} }. </div> <br> <br>

<br>
	&emsp;Методы решения данной задачи изложены также в <a href="../lk2/lk2.htm">[Динамическое программирование]</a>.



<br>
<br>
<p class="title"><a name="t4.1.6"><b>5.1.6 Задача о назначениях</b></a></p>

<br>
	&emsp;Задачу о назначениях можно кратко сформули-ровать следующим образом. Задано <div* lang="latex">n</div*> работ,
каждую из которых может выполнить любой из <div* lang="latex">n</div*> исполнителей. Стоимость выполнения работы <div* lang="latex">i</div*> 
исполнителем <div* lang="latex">j</div*> равна <div* lang="latex">c_{ij} </div*>.
Нужно распределить исполнителей по работам, т.е. назначить по одному исполнителю на каждую работу таким образом, чтобы минимизировать общие затраты.

<br>
	&emsp;Построим математическую модель данной задачи. Определим переменную


<br>
  <br>
  
        <div align="center"><img src="../../images/lk4/img4_1/27.gif" width="381" height="42" border="0" align="absmiddle" alt=""></font></div>
      
<br>
  &emsp;

Тогда математическая модель рассматриваемой задачи имеет вид

<br>


<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(7)">
<div lang="latex" align="center">
\sum _{i=1}^{n}\sum _{j=1}^{n}c_{ij}   x_{ij} \to \min ,
</div>
 </td>
      <td width="2%">(7)</td>
    </tr>
  </table>

<br>


<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(8)">
<div lang="latex" align="center">
\sum _{j=1}^{n}x_{ij}  =1,{\rm \; \; }i=\overline{1,n};{\rm \; \; \; \; \; \; \; }\sum _{i=1}^{n}x_{ij}  =1,{\rm \; \; }j=\overline{1,n};
</div>
 </td>
      <td width="2%">(8)</td>
    </tr>
  </table>

<br>


<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(9)">
<div lang="latex" align="center">
0\le x_{ij} \le 1,\quad i=\overline{1,n};\quad j=\overline{1,n};
</div>
 </td>
      <td width="2%">(9)</td>
    </tr>
  </table>

<br>


<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(10)">
<div align="center">
<div* lang="latex">x_{ij}</div*>
  -  целое,
  <div* lang="latex">\quad i=\overline{1,n};\quad j=\overline{1,n}.</div*>
</div>
 </td>
      <td width="2%">(10)</td>
    </tr>
  </table>

<br>

<br>
	&emsp;Очевидно, что задача <a href="#(7)">(7)</a> -- <a href="#(9)">(9)</a> -- частный случай транспортной задачи
<a href="#(1)">(1)</a>, <a href="#(2)">(2)</a>, <a href="#(3')">(3')</a>, когда

<br> <br> 


<div lang="latex" align="center"> 
a_{i} =1,\;\; i=\overline{1,n}; \; b_{j} =1,\; \; 
j=\overline{1,m};\;\;\;  n=m; \;\;  d_{ij} =1, \; i = \overline{1,n}, \;  j=\overline{1,m}. </div> <br> <br>

<br>
	&emsp;Нетрудно показать, что задача <a href="#(1)">(1)</a>, <a href="#(2)">(2)</a>, <a href="#(3')">(3')</a>
обладает следующим свойством: она имеет целочисленное решение, если <div* lang="latex">a_{i} ,\, \, i=\overline{1,n};</div*> <div* lang="latex">b_{j} ,
\, j=\overline{1,m}</div*> -- целые числа.
<br>
	&emsp; Следовательно, и задача <a href="#(7)">(7)</a> -- <a href="#(10)">(10)</a> -- частный случай задачи <a href="#(1)">(1)</a>, <a href="#(2)">(2)</a>, <a href="#(3')">(3')</a> --
 имеет целочисленное решение. Значит, для решения задачи <a href="#(7)">(7)</a> -- <a href="#(10)">(10)</a>
можно использовать метод потенциалов, отбросив условия целочисленности. Отметим, что задача <a href="#(7)">(7)</a> -- <a href="#(10)">(10)</a> --
специальная транспортная задача и для её решения можно разработать другие методы, отличные от метода потенциалов, учитывающие специфику этой задачи.
 Один из таких методов будет рассмотрен в далее.

<br>
<br>

<p class="title"><a name="t4.1.7"><b>5.1.7 Задача коммивояжёра</b></a></p>


<br>
	&emsp;Эта задача относится к следующей ситуации: коммивояжёр собирается посетить каждый из <div* lang="latex">n</div*> городов по одному разу,
выехав из первого города  и вернувшись в него же. Ни один город коммивояжёр не должен посещать дважды. Расстояние между городами
<div* lang="latex">i</div*>  и <div* lang="latex">j</div*> равно <div* lang="latex">c_{ij} </div*>
(если между городами <div* lang="latex">i</div*>  и <div* lang="latex">j</div*> нет дороги, то полагаем <div* lang="latex">c_{ij} = \infty </div*>).
 Надо найти кратчайший маршрут коммивояжёра.

<br>
	&emsp;Математическая модель этой задачи отображает также ситуацию совершенно иного характера.


<br>
	&emsp;Имеется <div* lang="latex">n</div*> сортов мороженого, которое изготавливается на одном и том же оборудовании.
Пусть <div* lang="latex">c_{ij} </div*> означает затраты времени на очистку и подготовку оборудования, когда сорт <div* lang="latex">j</div*> 
изготавливается после сорта <div* lang="latex">i</div*>.
 Предполагается, что заданная последовательность производства повторяется каждый день, т.е. оборудование после последнего
сорта мороженого опять настраивается на производство первого сорта.

Требуется найти такую последовательность производства, при которой затраты на переналадку были бы минимальными.


<br><br>
<br>
	&emsp;Обозначим

<br>
  <br>
  <table width="100%" border="0">
    <tr>
      <td width="98%">
        <div align="center"><img src="../../images/lk4/img4_1/32.gif" width="288" height="42"  border="0" align="absmiddle" alt=""></div>
      </td>
      <td width="2%">&nbsp;</td>
    </tr>
  </table>
</div>


<br>
	&emsp;Математическая  модель  задачи  коммивояжёра  совпадает с задачей <a href="#(7)">(7)</a>  --  <a href="#(10)">(10)</a>
 плюс ещё одно дополнительное требование

<br>
<br>
	&emsp; 


<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(11)">
<div  align="center"> совокупность дуг  <div* lang="latex">U_{*} (x)={\rm \{ }\, (i,j)\in U,\, \, x_{ij} ={\rm 1\} } </div*> образует один цикл.
</div>
 </td>
      <td width="2%">(11)</td>
    </tr>
  </table>

<br> 
 <br>


<br>
	&emsp;<b>Замечание.</b>   В <a href="#(11)">(11)</a> слово «цикл» можно было бы заменить словом «контур», поскольку с учетом ограничений <a href="#(8)">(8)</a> -- <a href="#(10)">(10)</a>
 легко показать, что все циклы, образованные совокупностью дуг   <div* lang="latex">U_{*} (x)</div*>, являются контурами. 


 <br>
<br>
	&emsp; 
Дополнительное ограничение <a href="#(11)">(11)</a> является существенным. Решив задачи
<a href="#(7)">(7)</a> -- <a href="#(9)">(9)</a> (без дополнительного условия <a href="#(11)">(11)</a>), 
мы можем получить такой оптимальный план <div* lang="latex">x^0</div*>,
для которого множество <div* lang="latex">U(x^0)</div*> состоит из двух и более циклов, что недопустимо в исходной задаче о коммивояжёре.
 <br>
	&emsp; Отметим, что ограничение <a href="#(11)">(11)</a> существенно усложняет решение задачи о коммивояжёре.
К настоящему времени разработано много методов решения задачи о коммивояжере. Некоторые из них будут описаны ниже.



<br>
<br>
<p class="title"><b><a name="t4.1.8">5.1.8 Задача о максимальном потоке</a></b></p>

<br>
	&emsp;  Пусть задана некоторая ориентированная сеть
<div* lang="latex">S=\{I,U\} </div*>. На каждой дуге <div* lang="latex">(i,j)\in U</div*>  задано число 
<div* lang="latex">d_{ij} \ge 0</div*> --пропускная способность дуги
 <div* lang="latex">(i,j)\in U.</div*> В сети <div* lang="latex">S</div*> выделены два узла <div* lang="latex">s\in I</div*> и <div* lang="latex">t \in I,</div*>
 <div* lang="latex">s\not=t</div*>; <div* lang="latex">s</div*> ---  источник, <div* lang="latex">t</div*> --- 
сток. Требуется найти максимальный поток из узла <div* lang="latex">s</div*>  в узел <div* lang="latex">t</div*>
 по дугам сети <div* lang="latex">S</div*> при условии, что величина <div* lang="latex">x_{ij} </div*> дугового 
потока по дуге <div* lang="latex">(i,j)\in U</div*> положительна и не превышает числа <div* lang="latex">d_{ij} </div*> ---
 пропускной способности дуги <div* lang="latex">(i,j)</div*>.

<br>
	&emsp; Математическая модель данной задачи имеет вид



<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(12)">
<div lang="latex" align="center">
\begin{array}{l} {{\rm \; \; \; \; \; \; \; \; }\, \, \, \, \, \, \, \, \, \, \, \, \, \, \, \, \, \, \, \, v\to \mathop{\max }\limits_{v,x} ,} \\
 {\sum \limits_{j\in I_{i}^{+} }x_{ij}  -\sum \limits_{j\in I_{i}^{-} }x_{ji}  =\left\{\begin{array}{l} {\nu \quad \mbox{ if } \quad i=s,} \\
{0\quad \mbox{ if }\quad i\in I\backslash \left\{s,t\right\},} \\
{-\nu\quad \mbox{ if }\quad i=t,} \end{array}\right. \quad }
 \\ {\, \, \, \, \, \, \, \, \, \, \, \, \, \, \, \, \, \, \, \, \, 0\le x_{ij} \le d_{ij} ,\quad \left(i,j\right)\in U.} \end{array}
</div>
 </td>
      <td width="2%">(12)</td>
    </tr>
  </table>

<br>

Свойства задачи <a href="#(12)">(12)</a> и методы ее решения описаны в следующем параграфе.



<br>
<br>
	<p class="title"><a name="t4.2"><b>5.2 Задача о максимальном потоке</b></a></p>
    <p class="title"><a name="t4.2.1"><b>5.2.1. Связь задачи о максимальном потоке с задачей о потоке минимальной стоимости</b></a></p>

 <br>
	&emsp; Как отмечалось в предыдущем параграфе,
 математическая модель задачи о максимальном потоке имеет вид <a href="#(12)">(12)</a>. Покажем, что задача <a href="#(12)">(12)</a> 
является частным случаем задачи о потоке минимальной стоимости.

<br>
	&emsp; Рассмотрим расширенную сеть <div* lang="latex">\overline{S}= \{ I,\bar{U} \},</div*> которая получается из исходной сети
 <div* lang="latex">S=\{ I,\bar U\} </div*> добавлением дуги <div* lang="latex">(t,s)</div*>: <div* lang="latex">\overline{U}=U\bigcup \left(t,s\right).</div*>

<br>
	&emsp; Положим <div* lang="latex">a_{i}= 0, ; i\in I, </div*> <div* lang="latex">c_{ij}= 0, \; (i,j)\in U</div*>, <div* lang="latex">c_{ts} = -1, \; d_{ts} = \infty </div*>
и рассмотрим задачу о потоке минимальной стоимости на сети <div* lang="latex">\overline{S}=\{ I,\overline{U} \} :</div*>

<br>

<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(13)">
<div lang="latex" align="center">
\begin{array}{c} {\sum\limits_{\left(i,j\right)\in \overline{U}}c_{ij} x_{ij}  \to \min ,} \\
\\
 {\sum \limits_{j\in I_{i}^{+} }x_{ij} -\sum \limits_{j\in I_{i}^{-} }x_{ji}   =
a_{i} ,\quad i\in I;\quad } \\ 
\\
{0\le x_{ij} \le d_{ij} ,\quad (i,j)\in \bar{U}.} \end{array}
</div>
 </td>
      <td width="2%">(13)</td>
    </tr>
  </table>

<br>

Очевидно, что задача <a href="#(13)">(13)</a> эквивалентна задаче <a href="#(14)">(14)</a>.
 Следовательно, для построения максимального потока можно воспользоваться методом потенциалов,
  применив его для решения задачи <a href="#(13)">(13)</a>, которая эквивалентна задаче о максимальном потоке.

<br>
	&emsp; Метод потенциалов рассчитан на решение произвольной задачи вида <a href="#(13)">(13)</a>, а у нас задача <a href="#(13)">(13)</a>
 имеет ряд специальных особенностей. Учёт этих особенностей позволяет разработать для её решения и другие методы.

<b>Замечание.</b> Если <div* lang="latex">\nu ^{0} =x_{ts}^{0} >0,</div*> то дуга <div* lang="latex">(t,s)\in \bar  U_{B}^{0} </div*>, т.е. 
принадлежит оптимальному базису. Следовательно, оптимальное дерево имеет следующую структуру


<div align="justify"><br>
<div align="center"> 
  <table width="100%" border="0">
    <tr>
      <td>
        <div align="center"><img id="pic4_1" src="../../images/lk4/img4_2/8.gif" width="323" height="84"  border="0" align="absmiddle" alt=""></div>
        <br><br><center>Рис. 4.1</center>
      </td>
    </tr>
  </table>
  
</div>

<br>
	&emsp; Рассмотрим задачу, двойственную к <a href="#(12)">(12)</a>. Задача, двойственная к <a href="#(12)">(12)</a>, имеет вид


<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(14)">
<div lang="latex" align="center">
\begin{array}{l} {\sum \limits_{\left(i,j\right)\in U}d_{ij}  \delta _{ij} \to \mathop{\min }\limits_{u,\delta } ,} \\ {u_{i} -u_{j} +\delta _{ij} \ge 0,\, \, \, 
\left(i,j\right)\in U,\quad } \\ {u_{t} -u_{s} \ge 1,\quad u_{s} =0,\quad \delta _{ij} \ge 0,\, \, \, \, \left(i,j\right)\in U.} \end{array}
</div>
 </td>
      <td width="2%">(14)</td>
    </tr>
  </table>

<br>

<br>
	&emsp; Теоретически возможно рассматривать переменные <div* lang="latex">\delta _{ij} </div*> как некие «переменные-индексаторы». 
Расшифруем смысл этого названия. Если в оптимальном двойственном решении <div* lang="latex">\delta _{ij} > 0,</div*> то дуга <div* lang="latex">(i,j)</div*> 
является элементом множества дуг, образующих «узкое место» в сети, т.е. именно эти дуги ограничивают значение максимального потока. Следует заметить, что 
таких узких мест может быть несколько.

<br>
<br>

<p class="title"><a name="t4.2.2"><b>5.2.2 Максимальный поток и минимальный разрез</b></a></p>


<br>
	&emsp; С понятием максимального потока тесно связано понятие разреза.

<br>
	&emsp; Рассмотрим любое множество узлов <div* lang="latex">I_*</div*> обладающее свойством: <div* lang="latex">I_*\subset I,</div*>  
<div* lang="latex">s\in I_*</div*>, <div* lang="latex">t\not \in I_*.</div*>
 По нему построим множество дуг

<br> <br> <div lang="latex" align="center">\omega = (I_{*}) = \{({i}, {j}) \in {U}: i \in I_{*},\;  {j} \notin I_{*}\}. </div> <br> <br>

<br>
	&emsp;  Совокупность дуг <div* lang="latex">\omega(I_{*}) </div*> называется <i>разрезом</i> сети <div* lang="latex">S</div*>,
 порождённым множеством узлов <div* lang="latex">I_*.</div*> Действительно, удаление дуг
 <div* lang="latex">\omega(I_{*}) </div*> из сети  <div* lang="latex">S</div*> разрывает все пути, ведущие из <div* lang="latex">s</div*> в 
<div* lang="latex">t</div*>. Сеть <div* lang="latex">S</div*>} становится как бы разрезанной на две части: часть с узлом <div* lang="latex">s</div*> и 
часть с узлом <div* lang="latex">t</div*> и нет ни одного пути из <div* lang="latex">s</div*> в <div* lang="latex">t.</div*>


<br>
	&emsp; Число


<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(15)">
<div lang="latex" align="center">\rho \left(\omega \right)=\sum _{(i,j)\in \omega (I_{*} )}d_{ij} 
</div>
 </td>
      <td width="2%">(15)</td>
    </tr>
  </table>

<br>
 называется <i>пропускной способностью разреза</i> <div* lang="latex">\omega(I_*).</div*> Разрез с минимальной пропускной способностью 
называется <i>минимальным разрезом</i>.

<br>
	&emsp; Покажем, что каждому разрезу <div* lang="latex">\omega(I_*)</div*> соответствует двойственный план, на котором значение целевой функции 
двойственной задачи <a href="#(3)">(3)</a> равно пропускной способности данного разреза.


<br>
	&emsp; Действительно, положим

<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(16)">
<div lang="latex" align="center">{u_{i} =0,\;  i \in I_{*}; \; u_{i} =1, i \in I \setminus I_*. 
</div>
 </td>
      <td width="2%">(16)</td>
    </tr>
  </table>

<br>
 Числа <div* lang="latex">\delta _{ij} , \; (i,j)\in U,</div*> определим таким образом, чтобы при заданных числах <a href="#(16)">(16)</a> выполнялись 
ограничения задачи <a href="#(14)">(14)</a> и значение ее целевой функции было минимальным:

<br>

<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(17)">
<div lang="latex" align="center">
\delta _{ij} =0,\, \, \mbox{ if }\, \, u_{i} -u_{j} \ge 0;\, \, \delta _{ij} =-(u_{i} -u_{j}), \, \mbox{ if }\, \,  u_{i} -u_{j} <0;\, \, (i,j)\in U.
</div>
 </td>
      <td width="2%">(17)</td>
    </tr>
  </table>

<br>

<br>
	&emsp; Из соотношений <a href="#(16)">(16)</a> и <a href="#(17)">(17)</a> получаем

<br> <br> <div lang="latex" align="center">\delta _{ij} =1,\, \, (i,j)\in \omega (I_{*} );\, \, \delta _{ij} =0,\, \, (i,j)\in U\backslash \omega (I_{*} ).\, \,
  </div> <br> <br>

Следовательно,


<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(18)">
<div lang="latex" align="center">
\sum _{\left(i,j\right)\in U}\delta _{ij} d_{ij}  =\sum _{\left(i,j\right)\in \omega \left(I_{*} \right)}d_{ij}  =\rho {\rm (}\omega {\rm (}I_{*} {\rm ))}.
</div>
 </td>
      <td width="2%">(18)</td>
    </tr>
  </table>

<br>

<br>
	&emsp; Из теории двойственности мы знаем, что значение прямой целевой функции на любом допустимом плане меньше значения двойственной целевой функции 
на любом двойственном допустимом плане. Отсюда с учётом <a href="#(18)">(18)</a> делаем вывод, что

<br> <br> <div lang="latex" align="center">\nu\le \rho(\omega(I_*)) </div> <br> <br>

для любого допустимого потока <div* lang="latex">v</div*> и любого разреза <div* lang="latex">\omega(I_*).</div*> Покажем теперь, что существуют такие
<div* lang="latex">\nu^{0} </div*> и <div* lang="latex"> I_{*}^{0} ,</div*> 
для которых <div* lang="latex">v^{0} =\rho (\omega (I_*)).</div*>

<br>
	&emsp; Действительно, выше мы отмечали, что задача о максимальном потоке эквивалентна специальной задаче о потоке минимальной стоимости
 <a href="#(13)">(13)</a>. Предположим, что мы решим эту задачу методом потенциалов. В результате получим некоторый оптимальный поток

<br> <br> <div lang="latex" align="center">\nu^{0} =x_{ts}^{0} ,\quad x_{ij}^{0} ,\quad (i,j)\in U, </div> <br> <br>

и соответствующий ему оптимальный базис-дерево

<br> <br> <div lang="latex" align="center">\bar U_{B} \subset \overline{U}=U\bigcup (t,s). </div> <br> <br>


Выше мы также отмечали, что <div* lang="latex">(t,s)\in \bar U_{B} </div*>  и множество <div* lang="latex">\bar U_{B} </div*> 
имеет структуру, приведенную на <a href="#pic4_1">рис. 4.1</a>.

<br>
	&emsp;Убрав дугу <div* lang="latex">(t,t) </div*>  из <div* lang="latex">\bar U_{B} </div*>, мы получаем две компоненты связности: содержащую узел

<br> <br> <div lang="latex" align="center">s\to {\rm \{ \; \; }I_{*}^{0} ,\, U_{*}^{0} {\rm \; \} } </div> <br> <br>

и содержащую узел

<br> <br> <div lang="latex" align="center">t\to {\rm \{ }I\backslash I_{*}^{0} ,(U_{{\rm }} \backslash (t,s))U_{*}^{0} {\rm \} }\, . </div> <br> <br>

<br>
	&emsp;По дугам <div* lang="latex">U_{B} </div*> подсчитаем потенциалы, согласно правилам



<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(19)">
<div lang="latex" align="center">
u_{i}^{0} -u_{j}^{0} =c_{ij} ,\quad \left(i,j\right)\in U_{{\rm }} ,\quad u_{s}^{0} =0.
</div>
 </td>
      <td width="2%">(19)</td>
    </tr>
  </table>

<br>
В силу специфики данной сети из <a href="#(19)">(19)</a> получаем





<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(20)">
<div lang="latex" align="center">
u_{i}^{0} =0,\quad i\in I_{*}^{0} ;\quad u_{i}^{0} =1,\quad i\in I\backslash I_{*}^{0} .
</div>
 </td>
      <td width="2%">(20)</td>
    </tr>
  </table>

<br>
<br>
	&emsp;Положим


<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(21)">
<div lang="latex" align="center">
\delta _{ij}^{0} =0,\, \,\mbox{ if }\, \, u_{i}^{0} -u_{j}^{0} \ge 0;\, \, \delta _{ij}^{0} =-(u_{i}^{0} -u_{j}^{0} ),\, \, \, 
\mbox{ if }\, u_{i}^{0} -u_{j}^{0} <0,\, \, (i,j)\in U.
</div>
 </td>
      <td width="2%">(21)</td>
    </tr>
  </table>

<br>

Легко проверить, что построенная совокупность <a href="#(20)">(20)</a>, <a href="#(21)">(21)</a> -- план задачи <a href="#(14)">(14)</a>.
 <br>
	&emsp;Из теории двойственности мы знаем, что этот план -- оптимальный двойственный план и имеет место равенство
<br>


<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(22)">
<div lang="latex" align="center">
\nu^{0} =\sum _{\left(i,j\right)\in U}d_{ij} \delta _{ij}^{0}  .
</div>
 </td>
      <td width="2%">(22)</td>
    </tr>
  </table>

<br>

Из <a href="#(22)">(22)</a> с учетом <a href="#(20)">(20)</a>, <a href="#(21)">(21)</a> получаем, что

<br> <br> <div lang="latex" align="center">\nu^{0} =
\sum _{\left(i,j\right)\in U}d_{ij} \delta _{ij}^{0}  \, \, \,
 =\sum _{\begin{array}{l} {{\rm \; \; \; \; \; \; }\left(i,j\right)\in U,} \\ 
{\, \, \, \, i\in I_{*}^{0} ,\, j\in I\backslash I_{*}^{0} } \end{array}}d_{ij}  =
\rho {\rm (}\omega {\rm (}I_{{\rm *}}^{0} {\rm )).} </div> <br> <br>

<br>
	&emsp;Таким образом, мы доказали теорему о максимальном потоке и минимальном разрезе, которая формулируется следующим образом.
<br>
<br>
	&emsp;	
<b>Теорема.</b> <i>Величина максимального потока в сети S равна пропускной способности минимального разреза на сети <div* lang="latex">S.</div*></i>

<br>
<br>
	&emsp;Значение теоремы о максимальном потоке и минимальном разрезе заключается в том, что максимальный поток в сети можно найти, вычисляя пропускные 
способности всех разрезов и выбирая среди них минимальный. Конечно, при решении задачи о максимальном потоке этот результат имеет небольшое 
практическое значение, так как мы не получаем никакой информации о самих величинах <div* lang="latex">x_{ij} </div*> дуговых потоков.
 Однако данный результат важен с теоретической точки зрения и часто используется при разработке сложных потоковых алгоритмов и при проверке решения на оптимальность.

<br>
	&emsp;Основываясь на полученных результатах, можно дать следующую интерпретацию двойственной задачи <a href="#(14)">(14)</a>: среди всех разрезов сети
 <div* lang="latex">S</div*> найти разрез с минимальной пропускной способностью.



<br>
<br>

<p class="title"><a name="t4.2.3"><b>5.2.3 Метод Форда-Фалкерсона (построение максимального 
  потока)</b></a></p>

<br>
	&emsp;Опишем алгоритм решения задачи о минимальном потоке, известный в литературе как метод Форда--Фалкерсона. Для описания алгоритма 
надо ввести два понятия: пометки и увеличивающего пути. Пометка узла используется для указания как величины потока, так и источника потока,
 вызывающего изменение текущей величины потока по дуге, т.е. указывается узел, с помощью которого помечается данный узел.

<br>
	&emsp;Увеличивающий путь потока из <div* lang="latex">s</div*> в <div* lang="latex">t</div*>  определяется как связная последовательность 
прямых и обратных дуг, по которым из <div* lang="latex">s</div*> в <div* lang="latex">t</div*> можно послать несколько единиц потока. 
Поток по каждой прямой дуге при этом увеличивается, не превышая её пропускной способности, а поток по каждой обратной дуге уменьшается, 
оставаясь при этом неотрицательным.

<br>
	&emsp;Алгоритм составим из следующих этапов.
	<br>
	<br>
	&emsp;

<br>
	&emsp;<b> Этап 1.</b> Определим начальный поток следующим образом:

<br> <br> <div lang="latex" align="center">v=0,\quad x_{ij} =0,\quad (i,j)\in U. </div> <br> <br>

<br>
	&emsp;<b> Этап 2.</b> Найдем увеличивающий путь в сети <div* lang="latex">S</div*> с заданным потоком. Если такой путь существует, то перейдем к этапу 3. 
В противном случае STOP: текущий поток является максимальным.

<br>
	&emsp;<b> Этап 3.</b> Увеличим поток, изменив при этом дуговые потоки. Используя новый поток, перейдем опять к этапу 2.

<br>
<br>
	&emsp;Опишем алгоритм построения увеличивающего пути. Считаем, что заданы дуговые потоки <div* lang="latex">x_{ij} ,\, \, (i,j)\in U.</div*>






<br>
	&emsp;<b> Шаг 1.</b>  Полагаем <div* lang="latex">I_{c}
= 1,\; , I_{t} = 1, \; L = \{{s}\}, g(s)= 0,</div*> <div* lang="latex"> i= s, p_s= 1.</div*> Здесь

<div* lang="latex">I_{c} </div*> -- счётчик итераций,

<div* lang="latex">I_{t} </div*> -- счётчик меток,

<div* lang="latex">L</div*> -- множество помеченных узлов,

<div* lang="latex">g(j)</div*> -- метка узла <div* lang="latex">j,</div*>

<div* lang="latex">p_j</div*> -- вторая метка узла <div* lang="latex">j</div*>.

<br>
	&emsp;<b> Шаг 2.</b> Рассмотрим непомеченный узел <div* lang="latex">j</div*>}, для которого существует дуга  <div* lang="latex">(i,j)\in U</div*> с
  <div* lang="latex">x_{ij} &lt; d_{ij} </div*>. Помечаем узел <div* lang="latex">j</div*>, полагая <div* lang="latex">g(j)= i, \; I_{t} :=I_{t} +1, \; p_{j}= I_{t} </div*>.
  Так поступаем с каждым непомеченным узлом <div* lang="latex">j</div*>, для которого существует дуга <div* lang="latex">(i,j)\in U</div*> с
  <div* lang="latex">x_{ij} &lt; d_{ij} </div*>. Помеченные узлы добавляем ко множеству помеченных узлов <div* lang="latex">L</div*>.

 <br>
	&emsp;<b> Шаг 3.</b> Рассмотрим непомеченный узел <div* lang="latex">j</div*>, для которого существует дуга
 <div* lang="latex">(j,i)\in U </div*> с  <div* lang="latex">x_{ji} >0</div*>.
  Помечаем узел <div* lang="latex">j</div*>, полагая <div* lang="latex">g(j)=-i, \; I_{t} :=I_{t}+ 1,\;  p_{j }= I_{t} </div*>.
	Так поступаем с каждым непомеченным узлом <div* lang="latex">j</div*>, для которого существует дуга <div* lang="latex">(j,i)\in U </div*> с  
	<div* lang="latex">x_{ji} >0</div*>. Помеченные узлы добавляем ко множеству помеченных узлов.

<br>
	&emsp;<b> Шаг 4.</b> Если узел <div* lang="latex">t</div*> помечен, то STOP: увеличивающий путь найден. Переходим к алгоритму 
восстановления пути и увеличения потока. Если узел <div* lang="latex">t</div*> не помечен, то переходим к шагу 5.

<br>
	&emsp;<b> Шаг 5.</b> Положим <div* lang="latex">I_{c} :=I_{c} +1</div*>. Найдём помеченный узел <div* lang="latex">j_0</div*>  с 
меткой <div* lang="latex">p_{j_{0} } =I_{c} .</div*>
<br>
<br>
	&emsp; Если такой узел найден, то полагаем <div* lang="latex">i:= j_0</div*> и возвращаемся к шагу 2. Если такого узла найти не 
удалось, то не существует увеличивающего пути из <div* lang="latex">s</div*> в <div* lang="latex">t</div*>. STOP.

<br>
	&emsp;Опишем алгоритм восстановления пути и увеличения потока.

<br>
	&emsp;По условию узел <div* lang="latex">t</div*> помечен. Пусть <div* lang="latex">q(t) =i_1</div*>, следовательно, из узла 
<div* lang="latex">i_1</div*> попадаем в узел <div* lang="latex">t</div*> по прямой дуге <div* lang="latex">(i_1,t).</div*> Полагаем

<br> <br> <div lang="latex" align="center">\alpha _{1} =d_{i_{1} t} -x_{i_{1} t} . </div> <br> <br>

<br>
	&emsp;Рассмотрим метку узла <div* lang="latex">i_1.</div*>  Предположим, что <div* lang="latex">q(i_1)=i_2 </div*>. Полагаем

<br> <br> <div lang="latex" align="center">\alpha _{2} :=\min {\rm \{ }\alpha _{1} ,\, \, d_{i_{2} i_{1} } -x_{i_{2} i_{1} } {\rm \} }\, . </div> <br> <br>

<br>
	&emsp;Если <div* lang="latex">q(i_1)=-i_2 </div*>, то полагаем

<br> <br> <div lang="latex" align="center">\alpha _{2} :=\min \, {\rm \{ }\alpha _{1} ,\, \, x_{i_{1} i_{2} } {\rm \} } </div> <br> <br>

(в последнем случае в увеличивающем пути дуга <div* lang="latex">(i_1,i_2)</div*> является обратной). И так далее, пока ни получим на некотором шаге

<br> <br> <div lang="latex" align="center">q\left(i_{m} \right)=\pm s,\quad \alpha _{m} :=
\left\{\begin{array}{l} {\min \, \, {\rm \{ }\alpha _{m-1} ,\quad d_{si_{m} } -x_{si_{m} } {\rm \} }\quad
\mbox{ if }\quad q(i_{m} )=s,} \\ {\min \, \, {\rm \{ }\alpha _{m-1} ,\quad x_{i_{m} s} {\rm \} }\quad
 \mbox{ if }\quad q(i_{m} )=-s.} \end{array}\right.  </div> <br> <br>

<br>
	&emsp;Таким образом, увеличивающий путь проходит через узлы <div* lang="latex">s,\; i_m,\; i_{m-1},\; \dots, \; i_2, \; i_1,\; t.</div*>

<br>
	&emsp;Изменяем дуговые потоки на дугах этого пути: дуговые потоки на прямых дугах увеличиваем на <div* lang="latex">\alpha _{m} </div*>, 
дуговые потоки на обратных дугах уменьшаем на
<div* lang="latex">\alpha _{m} </div*>, поток <div* lang="latex">\nu </div*> увеличиваем на <div* lang="latex">\alpha _{m} </div*>. STOP.

<br>
<br>

<strong><br><br><br>

  <a name="t4.2.4">&emsp;Пример. </a></strong>



<br>
	&emsp;Рассмотрим сеть, приведенную на <a href="#pic4_2">рис. 4.2</a>. Пропускные способности дуг <div* lang="latex">d_{ij} </div*> указаны на дугах «жирными» цифрами.

 <br>
	&emsp;Пусть на данной сети имеется допустимый поток <div* lang="latex">x=(x_{ij} ,(i,j)\in U)</div*> величины <div* lang="latex">v=9.</div*> 
Дуговые потоки <div* lang="latex">x_{ij} </div*> указаны на дугах «нежирными» цифрами. Проверим, является ли данный поток максимальным,
 и если нет, то построим новый поток, для которого <div* lang="latex">\bar{\nu}>\nu=9.</div*> Для этого осуществим итерации метода Форда--Фалкерсона.

<div align="justify"><br>
<div align="center"> 
  <table width="100%" border="0">
    <tr> 
      <td> 
        <div align="center"><br>
          <img id="pic4_2" src="../../images/lk4/img4_2/49.gif" width="424" border="0" align="absmiddle" alt=""></font></div>
          <br><br><center>Рис. 4.2</center>
      </td>
    </tr>
  </table>
  <br>
</div>

<br>
	&emsp;<b> Построение увеличивающего пути</b>
<br>
<br>
	&emsp;<b>Итерация 1</b>

<br>
	&emsp;<b>Шаг 1.</b> Полагаем

<br> <br> <div lang="latex" align="center">I_{c} =1,\, \, I_{t} =1,\, \, L={\rm \{ }s{\rm \} },{\rm \; \; \; }g(s)=0,{\rm \; \; }i=s,{\rm \; \; }p_{s} =1. </div> <br> <br>

<br>
	&emsp;<b>Шаг 2.</b> Из узла <div* lang="latex">i=s</div*> есть только одна дуга <div* lang="latex">(s,3)\in U</div*>, для которой <div* lang="latex">x_{s3} =5<9=d_{s3} .</div*> 
Помечаем узел 3, полагая

<br> <br> <div lang="latex" align="center">I_{t} =2,\, \, L={\rm \{ }s,\, \, 3{\rm \} },{\rm \; \; \; }g(3)=s,{\rm \; \; \; }p_{3} =2. </div> <br> <br>


<br>
	&emsp;<b>Шаг 3.</b> Для узла <div* lang="latex">i=s</div*>  нет ни одной дуги <div* lang="latex">(j,\, i)\in U,</div*> для которой <div* lang="latex">x_{ji} >0.</div*>
 Переходим к шагу 4.

<br>
	&emsp;<b>Шаг 4.</b> Поскольку <div* lang="latex">t\notin L</div*>, то переходим к шагу 5.

<br>
	&emsp;<b>Шаг 5.</b> Полагаем <div* lang="latex">I_{c} :=I_{c} +1</div*>, и, поскольку <div* lang="latex">p_{3} =I_{c} </div*>, то полагаем <div* lang="latex">j_{0} =3.</div*>

<br>
	&emsp; Переходим к шагу 2 итерации 2, положив <div* lang="latex">i=j_{0}.</div*>

<br>
<br>
	&emsp;
<b>Итерация 2</b>
<br>
<br>
	&emsp;<b>Шаг 2.</b> Из узла <div* lang="latex">i=3</div*>  нет дуг <div* lang="latex">(i,j)\in U</div*>, для которых <div* lang="latex">x_{ij} &lt; d_{ij}.</div*> 
Переходим к шагу 3.

<br>
	&emsp;<b>Шаг 3.</b> Для узла <div* lang="latex">i=3</div*> есть одна дуга <div* lang="latex">(1,3)\in U</div*>, для которой <div* lang="latex">x_{13} >0.</div*>
 Помечаем узел 1, полагая
 <br> <br> <div lang="latex" align="center">I_{t} =3,{\rm \; \; }L=\left\{\, s,\, 3\left. ,\, 1\, \right\}\right. ,{\rm \; \; \; }g(1)=-3,{\rm \; \; \; }p_{1} =3. </div> <br> <br>

<br>
	&emsp;<b>Шаг 4.</b> Поскольку <div* lang="latex">t\notin L</div*>, то переходим к шагу 5.

<br>
	&emsp;<b>Шаг 5.</b> Полагаем <div* lang="latex">I_{c} :=I_{c} +1</div*>=3 и находим узел <div* lang="latex">j_{0} \in L,</div*> для которого <div* lang="latex">p_{j_{0} } =I_{c} </div*>. На данной итерации <div* lang="latex">j_{0} =</div*>1. Переходим к шагу 2 итерации 3, полагая <div* lang="latex">i=j_{0} =1.</div*>
<br>
<br>
	&emsp;<b>Итерация 3</b>
<br>
<br>
	&emsp;<b>Шаги 2-3.</b> С помощью узла <div* lang="latex">i=1</div*> помечаем узел 4, полагаем

<br> <br> <div lang="latex" align="center">I_{t} =4,\, \, L=\left\{\, s,\, 3\left. ,\, 1,\, 4\, \right\}\right. ,\, \, g(4)=1,\, \, p_{4} =4. </div> <br> <br>

<br>
	&emsp;<b>Шаг 4.</b> Узел <div* lang="latex">t\notin L</div*>, переходим к шагу 5.

<br>
	&emsp;<b>Шаг 5.</b> Полагаем <div* lang="latex">I_{c} :=I_{c} +1 = 4</div*> и находим узел <div* lang="latex">j_{0} \in L,</div*> для которого
 <div* lang="latex">p_{j_{0} } =I_{c} </div*>. На данной итерации <div* lang="latex">j_{0} =4</div*>.
Переходим к шагу 2 итерации 4, полагая <div* lang="latex">i=j_{0} =4.</div*>

<br>
<br>
	&emsp;
<b>Итерация 4</b>
<br>
<br>
	&emsp;
<br>
	&emsp;<b>Шаги 2-3.</b>  С помощью узла <div* lang="latex">i=4</div*>  помечаем узел 2, полагая

<br> <br> <div lang="latex" align="center">I_{t} =5,\, \, L=\left\{\, s,\, 3\left. ,\, 1,\, 4,\, 2\, \right\}\right. ,\, \, g(2)=-4,\, \, p_{2} =5. </div> <br> <br>

<br>
	&emsp;<b>Шаг 4.</b>  Узел <div* lang="latex">t\notin L</div*>, переходим к шагу 5.

<br>
	&emsp;<b>Шаг 5.</b> Полагаем <div* lang="latex">I_{c} :=I_{c} +1=5,{\rm \; \; }j_{0} =2</div*>. Переходим к шагу 2 итерации 5, заменив 
<div* lang="latex">i</div*>  на <div* lang="latex">j_{0} =2</div*>.
<br>
<br>
	&emsp;
<b>Итерация 5</b>
<br>
<br>
	&emsp;
<b>Шаги 2-4.</b> С помощью узла <div* lang="latex">i=2</div*>  помечаем узел 5, полагая

<br> <br> <div lang="latex" align="center">I_{t} =6,\, \, L=\left\{\, s,\, \, 3\left. \, ,\, 1,\, \, 4,\, \, 2,\, \, 5\, \right\}\right. ,\, \,
 g(5)=2,\, p_{5} =6. </div> <br> <br>
Переходим к шагу 5.

<br>
	&emsp;<b>Шаг 5.</b>  Полагаем <div* lang="latex">I_{c} :=I_{c} +1=6,{\rm \; \; }j_{0} =5</div*>. Переходим к шагу 2 итерации 6, заменив 
<div* lang="latex">i</div*> на <div* lang="latex">j_{0} =5</div*>.
<br>
<br>
	&emsp;
<b>Итерация 6</b>
<br>
<br>
	&emsp;
<b>Шаги 2-4.</b> С помощью узла <div* lang="latex">i=5</div*>  помечаем узел <div* lang="latex">t</div*>, полагая 
<div* lang="latex">L={\rm \{ }\, s,\, 3,\, 1,\, 4,\,2,\, 5,t\, {\rm \} },\, \, g(t)=5.</div*>
Узел <div* lang="latex">t\in L</div*>. STOP -- увеличивающий путь построен. Значит, имеющийся поток можно увеличить.
<br>
<br>

<br>
	&emsp;Переходим к алгоритму восстановления пути и увеличения потока. Применяя <b>алгоритм восстановления пути и увеличения потока</b>, получаем

<br> <br> <div lang="latex" align="center">\begin{array}{l} {q(t)=5,{\rm \; \; \; \; }\, \, \, \alpha _{1} =d_{5t} -x_{5t} =2,} \\
 {q(5)=2,{\rm \; \; \; }\, \, \, \alpha _{2} =\min \left\{{\rm \; }\alpha _{1} ,\, \, 10\left. \right\}\right. =2,} \\
 {q(2)=-4,{\rm \; \; \; }\alpha _{3} =\min \left\{{\rm \; }\alpha _{2} ,\, \, 1\left. \right\}\right. =1,} \\ 
{q(4)=1,{\rm \; \; \; \; \; \; }\alpha _{4} =\min \left\{{\rm \; }\alpha _{3} ,\, \, 2\left. \right\}\right. =1,} \\ 
{q(1)=-3,{\rm \; \; \; }\, \, \alpha _{5} =\min \left\{{\rm \; }\alpha _{4} ,\, \, 2\left. \right\}\right. =1,} \\
 {q(3)=s,{\rm \; \; \; }\, \, \, \, \alpha _{6} =\min \left\{{\rm \; }\alpha _{5} ,\, \, 1\left. \right\}\right. =1.} \end{array} </div> <br> <br>

Увеличиваем поток вдоль построенного увеличивающего пути

<br> <br> <div lang="latex" align="center">U_{n} =\left\{\right. (s,\, 3),(1,\, 3),(1,\, 4),(2,\, 4),(2,\, 5),(5,\, t)\left. \right\}, </div> <br> <br>

изменяя дуговые потоки на дугах <div* lang="latex">(i,j)\in U_{} :</div*> по правилу

<br> <br> <div lang="latex" align="center">\bar{x}_{s3} =x_{s3} +\alpha _{6} =6, \bar{x}_{13} =x_{13} -\alpha _{6} =1, \bar{x}_{14} =x_{14} +\alpha _{6} =3, </div> <br> <br>

<br> <br> <div lang="latex" align="center">\bar{x}_{24} =x_{24} -\alpha _{6} =0, \bar{x}_{25} =x_{25} +\alpha _{6} =1, \bar{x}_{5t} =x_{5t} +\alpha _{6} =8, </div> <br> <br>



<br> <br> <div lang="latex" align="center"> \bar{x}_{ij} =x_{ij} ,(i,j)\in U\setminus U_{n} ,{\rm \; \; }
\bar{\nu }=\nu +\alpha _{{\rm 6}} . </div> <br> <br>

<br>
	&emsp; Сеть <div* lang="latex">S</div*> с новым потоком <div* lang="latex">\bar{x}</div*> приведена на <a href="#pic4_3">рис. 4.3</a>.

<br>
	&emsp;Поток <div* lang="latex">\bar{x}</div*> является максимальным. Действительно, применив к сети <div* lang="latex">S</div*>
 с потоком <div* lang="latex">\bar{x}</div*>
 алгоритм построения увеличивающего пути, мы можем пометить только узлы
  <div* lang="latex">L=\left\{\right. s,\, 3,\, 1,\, 4,\left. \right\}.</div*>
  После чего на шаге 5 не удается найти узел <div* lang="latex">j_{0} </div*>, для которого
  <div* lang="latex">p_{j_{0} } =I_{c} .</div*>
  <br>
	&emsp;Легко проверить, что множество узлов <div* lang="latex">L</div*> задают разрез

<br> <br> <div lang="latex" align="center">\omega (L)=\left\{\right. (3,\, 2),(3,\, 6),(4,\, 5),(2,\, t)\left. \right\} , </div> <br> <br>

пропускная способность которого равна <div* lang="latex">\rho (\omega (L))=1+6+1+2=10=\bar{\nu}.</div*>

<div align="justify"><br>
<div align="center"> 
  <table width="100%" border="0">
    <tr> 
      <td> 
        <div align="center"><img id="pic4_3" src="../../images/lk4/img4_2/82.gif" width="436" border="0" align="absmiddle" alt=""></font></div>
        <br><br><center>Рис. 4.3</center>
      </td>
    </tr>
  </table>
</div>
<br>

 Согласно теореме, <div* lang="latex">\bar{x},\bar{\nu}</div*> -- максимальный поток, <div* lang="latex">\omega (L)</div*> -- минимальный разрез.

<br>
<br>
	<p class="title"><a name="t4.3"><b>5.3 Задача о назначениях</b></a></p>
    <p class="title"><a name="t4.3.1"><b>5.3.1. Постановка задачи</b></a></p>
<br>
	&emsp;Имеется <div* lang="latex">n</div*> видов работ и <div* lang="latex">n</div*> исполнителей, каждый из которых может выполнять 
любую работу. При назначении <div* lang="latex">j</div*>-го работника на <div* lang="latex">i</div*>-ю работу
 затраты предприятия равны <div* lang="latex">c_{ij} </div*>. Требуется на каждую работу назначить по исполнителю таким образом,
 чтобы общие расходы предприятия были минимальными. Математическая модель данной задачи имеет вид

<br> <br> <div lang="latex" align="center">\sum _{i=1}^{n}\sum _{j=1}^{n}c_{ij} x_{ij}  \to \min  ; </div> <br> <br>


<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(23)">
<div lang="latex" align="center">
\sum _{j=1}^{n}x_{ij} =1,\, \, i=\overline{1,n};{\rm \; \; \; \; }\sum _{i=1}^{n}x_{ij} =1,\, \,   j=\overline{1,n};
</div>
 </td>
      <td width="2%">(23)</td>
    </tr>
  </table>

<br>

<br> <br> <div lang="latex" align="center">x_{ij} =0\vee 1,\, \, i=\overline{1,n},\, \, j=\overline{1,n}. </div> <br> <br>
Здесь <img src="../../images/lk4/img4_3/2.gif" width="432" height="44" border="0" align="absmiddle" alt=""> 
  <br>
  <br>
  </div>
<br>
	&emsp;Задача <a href="#(23)">(23)</a> -- частный случай транспортной задачи в матричной форме. Дополнительное требование целочисленности
 не является существенным (в данной задаче!), так как ранее мы отмечали, что если в транспортной задаче параметры 
<div* lang="latex">a_{i} ,b_{i} ,d_{ij} </div*> -- целые, то существует целочисленное решение задачи <a href="#(23)">(23)</a> и 
это решение можно построить с помощью классического метода потенциалов. Следовательно, для решения задачи <a href="#(23)">(23)</a> 
можно использовать классический метод потенциалов. Отметим, однако, что на каждой итерации метода потенциалов мы будем иметь вырожденный базисный план.
 
<br>
	&emsp;Действительно, в задаче <a href="#(23)">(23)</a> каждая компонента плана может принимать только критические значения 0 или 1, и,
	следовательно, согласно определению, любой допустимый план будет «полностью» вырожденным.

<br>
	&emsp;Можно заменить условия

<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(24)">
<div lang="latex" align="center">
0\le x_{ij} \le 1,\, \, i=\overline{1,n},\, \, j=\overline{1,n}
</div>
 </td>
      <td width="2%">(24)</td>
    </tr>
  </table>

<br>
на условия

<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(25)">
<div lang="latex" align="center">
0\le x_{ij} ,\, \, i=\overline{1,n},\, \, j=\overline{1,n}.
</div>
 </td>
      <td width="2%">(25)</td>
    </tr>
  </table>

<br>
Но и в этом случае каждый базисный план будет вырожденным. Действительно, если мы начнём решение с целочисленного плана, то и на всех последующих 
итерациях у нас будет целочисленный план. С учётом этого заключаем, что на каждом плане только <div* lang="latex">n</div*> компонент могут быть отличны от 0, 
а остальные равны 0. Базис состоит из <div* lang="latex">2n-1</div*> элементов. Следовательно, среди базисных компонент будет <div* lang="latex">n-1</div*> нулевых.
 Значит, и в случае использования ограничений <a href="#(25)">(25)</a> каждый базисный план будет вырожденным.






  
  <br>
  <br>
  
  
  
  
  
  
  
  
  


<div align="justify">&emsp;Хорошо известно, что вырожденность отрицательно сказывается на эффективности 
  метода потенциалов (симплекс-метода) и при вырожденности велика вероятность 
  зацикливания. В силу отмеченных причин, нельзя ожидать, что метод потенциалов "в чистом виде" 
  будет эффективен для решения задачи <a href="#(23)">(23)</a>. Следовательно, нужны другие методы, 
  учитывающие ее специфику. Рассмотрим один из таких методов, получивший название 
  "венгерский метод", так как в нем существенно используются результаты венгерского 
  математика Эгервари.</div>
<div align="center"><br>
  <br>
  <br>
   <strong><a name="t4.3.2">5.3.2 Венгерский метод<br>
  <br>
  </a></strong></div>
  
 <br>
	&emsp;По параметрам задачи <a href="#(23)">(23)</a> составим <div* lang="latex">(n\times n)</div*>-матрицу стоимостей 
<div* lang="latex">C=(c_{ij} ,\, \, j=\overline{1,n},\, \, i=\overline{1,n})</div*>. Предположим, что каждый элемент <div* lang="latex">i</div*>-й 
строки складывается с действительным числом <div* lang="latex">\gamma _{i} </div*>, а каждый элемент <div* lang="latex">j</div*>-го столбца складывается с
 действительным числом <div* lang="latex">\delta _{j} </div*>. В результате такого 
преобразования матрицы <div* lang="latex">C</div*> будет получена новая матрица стоимостей <div* lang="latex">D</div*> 
с коэффициентами



<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(26)">
<div lang="latex" align="center">
d_{ij} =c_{ij} +\gamma _{i} +\delta _{j} ,\, \, i=\overline{1,n},\, \, j=\overline{1,n}. 
</div>
 </td>
      <td width="2%">(26)</td>
    </tr>
  </table>

<br>




Из <a href="#(23)">(23)</a>, <a href="#(26)">(26)</a> получаем

<br>
<br>
<div lang="latex" align="center">\sum _{i=1}^{n} \sum _{j=1}^{n}c_{ij} x_{ij}  =\sum _{i=1}^{n} \sum _{j=1}^{n}d_{ij} x_{ij}  -\sum _{i=1}^{n} \sum _{j=1}^{n}
\gamma _{i} x_{ij}  -\sum _{i=1}^{n} \sum _{j=1}^{n}\delta _{j} x_{ij}  =</div>
<br>
<br>

<div lang="latex" align="center">= \sum _{i=1}^{n} \sum _{j=1}^{n}d_{ij} x_{ij}  -\sum _{i=1}^{n}\gamma _{i}  \sum _{j=1}^{n}x_{ij}^{}  
-\sum _{j=1}^{n}\delta _{j}  \sum _{i=1}^{n}x_{ij}  =</div>
<br>
<br>

<div lang="latex" align="center">
\sum _{i}\sum _{j}d_{ij} x_{ij}  -\sum _{i=1}^{n}\gamma _{i} -\sum _{j=1}^{n}\delta _{j}=\sum _{i}\sum _{j}d_{ij} x_{ij} + 
 const.</div>
<br>
 
                                                                                                             

<br>
	&emsp; Отсюда следует, что при ограничениях задачи о назначениях минимизация функции 
<div* lang="latex">\sum _{i=1}^{n} \sum _{j=1}^{n}c_{ij} x_{ij}  </div*> эквивалентна минимизации функции 
<div* lang="latex">\sum _{i=1}^{n} \sum _{j=1}^{n}d_{ij} x_{ij}  </div*> 
(здесь <div* lang="latex">\gamma _{i} ,\; \delta _{i} </div*> -- любые действительные числа). Это свойство задачи <a href="#(23)">(23)</a> 
 и составляет основу излагаемого ниже алгоритма.

 <br>
 <br>
 
<br>
	&emsp; Общая схема метода следующая:

<br>
	&emsp; 1. Из элементов каждой строки и каждого столбца матрицы стоимостей вычитаются их наименьшие элементы.

<br>
	&emsp; 2. Ведётся поиск допустимого плана задачи <a href="#(23)">(23)</a>, единичным элементам которого соответствуют 
нулевые элементы модифицированной матрицы стоимостей, т.е. строится «нулевое» назначение. 

<br>
	&emsp;  3. Если такой допустимый план существует, то он является оптимальным планом назначений. 
Если такого плана не существует, то матрица стоимостей модифицируется ещё раз с целью получить в ней большее число нулевых элементов.
<br>

<br>
	&emsp; Прокомментируем кратко эти три шага алгоритма.
<br>
<br>
	&emsp;<b>Шаг 1.</b> <i> Редукция строк и столбцов.</i> Цель данного шага состоит в получении максимально возможного числа нулей в матрице стоимостей.
Для этого можно последовательно из всех элементов каждой строки вычесть по минимальному элементу, затем в полученной матрице из каждого столбца вычесть 
по минимальному элементу, найденному среди элементов данного столбца. Заменить исходную матрицу стоимостей на новую.

<br>
<br>
	&emsp;<b>Шаг 2.</b> <i> Определение назначений. </i> Если после выполнения процедуры редукции в каждой строке и в каждом 
столбце матрицы стоимостей можно выбрать по одному нулевому элементу так, что соответствующее этим элементам решение будет допустимым планом, то данное назначение будет оптимальным. Действительно, стоимость построенного назначения равна нулю. Поскольку все элементы текущей модифицированной матрицы стоимостей неотрицательные, то стоимость любого другого допустимого назначения будет больше либо равной нулю. Отсюда заключаем, что построенное «ненулевое» назначение является оптимальным. Если назначений нулевой стоимости для редуцированной матрицы найти нельзя, то данная матрица стоимостей подлежит дальнейшей модификации (см. шаг 3).

<br>
<br>
	&emsp;<b>Шаг 3.</b> <i> Модификация редуцированной матрицы. </i> Эта процедура нацелена на получение новых нулей в матрице стоимостей.
 Из имеющейся матрицы стоимостей вычеркнем <i>минимально возможное </i> число строк и столбцов, содержащих нулевые элементы. 
Среди невычеркнутых элементов матрицы найдём минимальный элемент. Ясно, что он положительный. Пусть он равен <div* lang="latex">\alpha >0</div*>.

<br>
	&emsp;Если значение <div* lang="latex">\alpha </div*> вычесть из всех (вычеркнутых и невычеркнутых) элементов старой редуцированной матрицы, 
то среди вычеркнутых элементов могут появиться отрицательные (причём минимальные из них равны <div* lang="latex">-\alpha </div*> и 
стоят на месте старых нулей), а среди невычеркнутых элементов не будет отрицательных, но появится хотя бы один нулевой элемент.

<br>
	&emsp;Чтобы избавится от отрицательных элементов в вычеркнутых элементах, поступим следующим образом: 
к элементам каждой вычеркнутой строки и к элементам каждого вычеркнутого столбца добавим по числу <div* lang="latex">\alpha </div*>.
<br>
	&emsp; Отметим, что в результате последней процедуры величина <div* lang="latex">\alpha </div*> будет прибавляться дважды к вычеркнутым элементам, стоящим на пересечении 
вычеркнутых строк и столбцов.
<br>
<br>
	&emsp;Кроме того, можно показать, что:


<br>
	&emsp;1) как и раньше, все отрицательные элементы будут преобразованы в нулевые или положительные элементы; 

<br>
	&emsp;2) полученная матрица является редуцированной матрицей по отношению к исходной матрице стоимостей <div* lang="latex">C</div*>, т.е.
 она может быть получена из <div* lang="latex">C</div*> в результате преобразования <div* lang="latex">c_{ij} \to d_{ij} =c_{ij} +\gamma _{i} +\delta _{j} </div*>, где 
<div* lang="latex">\gamma _{i} ,\; \delta _{j} </div*> -- некоторые действительные числа;

<br>
	&emsp;3) в результате выполнения данной процедуры новая редуцированная матрица стала содержать больше нулей,
 расположенных вне строк и столбцов, соответствующих ненулевым элементам текущего неоптимального плана (построенного на шаге 2).
 Отметим, что в общем случае общее число нулей новой редуцированной матрицы может и уменьшиться!
<br>
<br>
	&emsp;Таким образом, при реализации венгерского метода надо осуществить две основные процедуры -- шаг 2 и шаг 3.


<br>
	&emsp;Опишем эти процедуры более детально.
  
  
  
  
  
<div align="justify"><strong><br>
  &emsp;Процедура, используемая на шаге 2. </strong><br>
  
<br>
	&emsp; На основе текущей матрицы стоимостей
 <div* lang="latex">C=(c_{ij} ,\, \, i=\overline{1,n,}{\rm \; \; \; }j=\overline{1,n})</div*> 
сформируем сеть <div* lang="latex">S=\{ I,U\} </div*> со множеством узлов 
<div* lang="latex">I=\{ s,t\} \bigcup N\bigcup N_{*} </div*>, где <div* lang="latex">N=\{ \, \, 1,\, \, 2,\, ...,\, \, n\, \, \} ,</div*>
<div* lang="latex">N_{*} =\{ \, n+1,\, \, n+2,\, \, ...,\, \, 2n\, \} </div*>
и множеством дуг <div* lang="latex">U=U_{1} \bigcup U_{0} \bigcup U_{*} </div*>, 
где <div* lang="latex">U_{1} =\{ \, (s,i),i\in N\, \} </div*>, <div* lang="latex">U_{*} =\, \{ (i,t),i\in N_{*} \, \} </div*>,
 <div* lang="latex">U_{0} =\{ (i,j),i\in N,$ $j\in N_{*} :c_{i{\rm \; }j-n} =0\} </div*>.
 
<br>
	&emsp;На сети <div* lang="latex">S=\{ I,U\} </div*> с пропускными способностями дуг



<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(27)">
<div lang="latex" align="center">
d_{ij} =1,\, \, (i,j)\in U_{1} \bigcup U_{*} ;{\rm \; \; \; \; }d_{ij} =\infty ,\, \, (i,j)\in U_{0},  
</div>
 </td>
      <td width="2%">(27)</td>
    </tr>
  </table>

<br>

решим задачу о максимальном потоке из узла <div* lang="latex">s</div*>; в узел <div* lang="latex">t</div*>;. 
Для решения данной задачи можно использовать метод Форда--Фалкерсона <a href="#t4.2.3">[Метод Форда-Фалкерсона (построение максимального потока)]</a>

<br>
	&emsp;Пусть
<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(28)">
<div lang="latex" align="center">
v^{0} ,y_{ij}^{0} ,{\rm \; \; }(i,j)\in U,
</div>
 </td>
      <td width="2%">(28)</td>
    </tr>
  </table>

<br>

-- максимальный поток в сети <div* lang="latex">S</div*>; и <div* lang="latex">I_{*} , \; I_{*} \subset I,{ \; \; }s\in I_{*} ,{ \; \; }t\notin I_{*} </div*>
 -- множество узлов, помеченных на последней итерации метода Форда--Фалкерсона.

<br>
	&emsp; Если <div* lang="latex">v^{0} =n</div*>, то исходная задача о назначениях решена. Оптимальный план
назначений
<br>
<br>
<div lang="latex" align="center">
 x^{0} =(x_{ij}^{0} ,\, \, i=\overline{1,n,}{\rm \; \; \; }j=\overline{1,n}),</div>
<br>
строится по правилу
<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(29)">
<div  align="center">
<div* lang="latex">x_{ij}^{0} =1,</div*> если  <div* lang="latex" >\; (i,j+n)\in U_{0} \; </div*> и 
<div* lang="latex" >y_{ij+n}^{0} =1; </div*></div>
<div  align="center">
<div* lang="latex">   x_{ij}^{0} =0  \; </div*>   в противном случае,
</div>
 </td>
      <td width="2%">(29)</td>
    </tr>
  </table>

<br>
<div lang="latex" align="center">i=\overline{1,n,}{\rm \; \; \; }j=\overline{1,n}.</div>
<br> 

<br> 
	&emsp; Алгоритм прекращает свою работу.

 <br>
	&emsp;Если <div* lang="latex">v^{0} &lt; n </div*>, то в текущей матрице стоимостей нельзя осуществить полное ``нулевое'' назначение. Переходим к операциям шага 3.


  
  <div align="justify"><strong><br>
  &emsp;Процедура, используемая на шаге 3. </strong>
  
  
  <br>
	&emsp;Пусть <div* lang="latex">C=(c_{ij} ,\, \, i=\overline{1,n,}{\rm \; \; \; }j=\overline{1,n})</div*> -- текущая матрица стоимостей; 
<div* lang="latex">v^{0} ,y_{ij}^{0} ,{\rm \; \; \; }(i,j)\in U</div*> -- максимальный поток и <div* lang="latex">I_{*} \subset I</div*>
 -- множество помеченных узлов, построенных на шаге 2. Положим
<br>
<div lang="latex" align="center">N^{(1)} =\{ i\in N:i\in I_{*} \} ,{\rm \; \; \; }N^{(2)} =\{ i\in N:i+n\in I_{*} \} .</div><br> 

<br>
	&emsp;Используя результаты из  <a href="#t4.2.3">[Метод Форда-Фалкерсона (построение максимального потока)]</a>, нетрудно показать, что по построению выполняются следующие свойства:

<br>
	&emsp; а) если <div* lang="latex">{\rm \; }(i,j+n)\in U_{0} </div*> и <div* lang="latex">i\in N^{(1)} </div*>, то <div* lang="latex">j\in N^{(2)} </div*>;

<br>
	&emsp;б) если <div* lang="latex">{\rm \; }(i,j+n)\in U_{0} </div*> и <div* lang="latex">y_{i{\rm \; }j+n}^{0} >0</div*>, то <div* lang="latex">i\in N^{(1)} </div*>, 
<div* lang="latex">j\in N^{(2)} </div*> либо <div* lang="latex">i\notin N^{(1)} </div*>, <div* lang="latex">j\notin N^{(2)} </div*>;

<br>
	&emsp;в) если <div* lang="latex">v^{0} < n </div*>, то <div* lang="latex">N^{(1)} \ne \emptyset,{\rm \; \; \; }N^{(2)} \ne N.</div*>
<br>

<br>
	&emsp;Найдем число 

<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(30)">
<div lang="latex" align="center">
\alpha =\mathop{\min }\limits_{^{\begin{array}{l} {{\rm \; \; \; \; \; \; \; }i\in N^{(1)} ,} \\ {j\in N^{} \backslash N^{(2)} } \end{array}} } c_{ij} .
</div>
 </td>
      <td width="2%">(30)</td>
    </tr>
  </table>

<br>



Из свойств «а» -- «в» и правил построения множества <div* lang="latex">U_{0} </div*> следует, что
<br>
<div lang="latex" align="center">\alpha >0.</div>
<br> 
<br>
<br>
	&emsp; Изменим матрицу стоимостей следующим образом. От всех элементов строк с номерами <div* lang="latex">i\in N^{(1)} </div*> отнимем число <div* lang="latex">\alpha </div*>.
 Ко всем элементам столбцов с номерами <div* lang="latex">j\in N^{(2)} </div*> прибавим число <div* lang="latex">\alpha </div*>.
 В результате получим новую матрицу стоимостей <div* lang="latex">\bar{C}=(\bar{c}_{ij} ,\, \, i=\overline{1,n},\, \, j=\overline{1,n})</div*> с коэффициентами:
<br>
<br>
   <div  align="center"> <div* lang="latex"> \bar{c}_{ij} =c_{ij} ,</div*> если  <div* lang="latex">i\in N^{(1)} ,   \;\; j\in N^{(2)} </div*> 
		либо <div* lang="latex">i\notin N^{(1)} ,  \;\; j\notin N^{(2)} </div*>;</div>
		
<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(31)">
<div lang="latex" align="center">
\bar{c}_{ij} =c_{ij} -\alpha ,  \mbox{ if } i\in N^{(1)} ,  j\notin N^{(2)} ;  
</div>
 </td>
      <td width="2%">(31)</td>
    </tr>
  </table>

<br>
<div lang="latex" align="center">\bar{c}_{ij} =c_{ij} +\alpha , \mbox{ if  } i\notin N^{(1)} ,   j\in N^{(2)} .</div>
<br> 

<br>
<br>
	&emsp;Используя новую матрицу стоимостей <div* lang="latex">\bar{C}</div*>, переходим к шагу 2. 
<div align="justify"><strong><br>
  &emsp;Конечность алгоритма. </strong>
  <br>
  
<br>
&emsp;Из соотношений <a href="#(31)">(31)</a> следует, что матрица <div* lang="latex">\bar{C}</div*>, построенная на шаге 3, обладает свойствами:
<br>
<br>
&emsp; 1) &emsp;&emsp;&emsp;&emsp;&emsp; &emsp;&emsp;<div* lang="latex" >   \bar{c}_{ij} \ge 0,{\rm \; \; }i=\overline{1,n},{\rm \; \; }j=\overline{1,n};</div*>
<br>


<br>
<br>
	&emsp;2) матрица <div* lang="latex">\bar{C}</div*> является редуцированной матрицей по отношению к матрице <div* lang="latex">С</div*>;
<br>
<br>
&emsp;3) &emsp;&emsp;&emsp;&emsp;&emsp; &emsp;&emsp;<div* lang="latex" >  \bar{c}_{ij} =c_{ij} =0, \mbox{if } \; y_{i{\rm \; }j+n}^{0} >0,{\; \; \; }(i,j+n)\in U_{0} ;</div*>
<br> 

<br>
<br>
	&emsp;4) найдется такой элемент <div* lang="latex">(i_{*} ,j_{*} )</div*>, что <div* lang="latex">\bar{c}_{i_{*} j_{*} } =0,\, \, c_{i_{*} j_{*} } =\alpha >0,\;\; 
i_{*} \in N^{(1)} ,{ \; \; } j_{*} \notin N^{(2)} .</div*>

 <br>
<br>
	&emsp;Из 3-го и 4-го свойств следует, что при каждом последующем использовании процедуры шага 2 либо увеличивается множество помеченных узлов <div* lang="latex">I_{*} </div*>, 
либо величина максимального потока по дугам с нулевой стоимостью увеличивается хотя бы на 1. Поскольку 
<div* lang="latex">I_{*} \subset I,{\rm \; \; \; }|I|=2n+2, \; \; v^{0} \le n</div*>, 
то очевидно, что через конечное число повторений шага 2 мы придем к ситуации, когда будет найден максимальный поток <a href="#(28)">(28)</a> с 
<div* lang="latex">v^{0} =n</div*>. Согласно алгоритму, это означает, что исходная задача решена. Оптимальный план назначений строится по правилам <a href="#(29)">(29)</a>.

<br>
<br>
	&emsp;<b> Замечания: 1.</b> Из свойств матрицы <div* lang="latex">\bar{C}</div*> следует, что 
при решении задачи о максимальном потоке на шаге 2 текущей итерации в качестве начального допустимого потока можно 
брать оптимальный поток, полученный на шаге 2 предыдущей итерации. 

<br>
<br>
	&emsp;<b>2.</b>  На шаге 2 алгоритма используется метод Форда--Фалкерсона для нахождения максимального потока в сети 
<div* lang="latex">S</div*>, построенной по текущей матрице стоимостей. Сеть <div* lang="latex">S </div*> 
имеет специальную структуру. Учет этой специфики позволяет разработать упрощенные табличные приемы реализации метода Форда--Фалкерсона, позволяющие сократить объем вычислений.
<br>
<br>
<div align="justify"><strong><a name="t4.3.3">&emsp;Пример. </a></strong><br>
  &emsp;Начальная матрица стоимостей имеет вид 


<br>
<div lang="latex" align="center">\left(\begin{array}{cccc} {2} & {10} & {9} & {7} \\
 {15} & {4} & {14} & {8} \\ {13} & {14} & {16} & {11} \\ {4} & {15} & {13} & {19} \end{array}\right).</div>
<br>
  


<br>
<br>
&emsp;<b>Шаг 1. </b> После просмотра строк и соответствующих преобразований получаем
<br>
<div lang="latex" align="center">\left(\begin{array}{cccc} {0} & {8} & {7} & {5} \\ {11} & {0} & {10} & {4} \\ {2} & {3} & {5} & {0} \\
 {0} & {11} & {9} & {15} \end{array}\right).</div>
<br>
 


<br>
  &emsp; После просмотра столбцов и соответствующих преобразований получаем

<br>
<div lang="latex" align="center">\left(\begin{array}{cccc} {0} & {8} & {2} & {5} \\ {11} & {0} & {5} & {4} \\ 
{2} & {3} & {0} & {0} \\ {0} & {11} & {4} & {15} \end{array}\right).</div>
<br>
 



<br>
<br>
&emsp;<b>Шаг 2. </b> Используя последнюю матрицу, сформируем сеть <div* lang="latex">S, </div*> приведенную на <a href="#pic4_4">рис. 4.4</a>.


 <br>
<div align="center"> 
  <table width="100%" border="0">
    <tr> 
      <td> 
        <div align="center"><img id="pic4_4" src="../../images/lk4/img4_3/47.gif" width="446" border="0" align="absmiddle" alt=""></font></div>
        <br><br><center>Рис. 4.4</center>
      </td>
    </tr>
  </table>
</div>
<br>


<br>
  &emsp;На сети <div* lang="latex">S</div*>  с пропускными способностями <a href="#(27)">(27)</a> решим задачу о максимальном потоке. Максимальный поток <a href="#(28)">(28)</a>
приведен на дугах сети <div* lang="latex">S</div*>  на <a href="#pic4_4">рис. 4.4</a>. Множество помеченных узлов <div* lang="latex">I_{*} </div*> состоит из узлов 
<div* lang="latex">I_{*} =\{s, 1, 4, 5\}. </div*>
Поскольку <div* lang="latex">v^{0} =3<n=4</div*>, то переходим к шагу 3.

<br>
<br>
&emsp;<b>Шаг 3. </b> Построим множество 
<div* lang="latex">N^{(1)} ={\rm \{ \; }1,\, \, 4{\rm \; \} \; \; 8\; \; }N^{(2)} ={\rm \{ \; }1{\rm \; \} }</div*>.
 Подсчитаем число <div* lang="latex">\alpha </div*> <a href="#(30)">(30)</a> для нашего примера
<br>
<br>
<div lang="latex" align="center">\alpha =\min {\rm \{ \; \; }c_{1j} ,{\rm \; \; }j=\overline{2,4},{\rm \; \; }c_{4j} ,\, \, j=\overline{2,4}{\rm \; \} }
=\min {\rm \{ }\, 8,\,  2,\,  5,\,  11,\,  4,\,  15\, {\rm \} }=2.
</div>
<br>
 
<br>
  &emsp;Используя <div* lang="latex">\alpha , \; N^{(1)} ,\; N^{(2)} </div*>, построим новую матрицу стоимостей <div* lang="latex">\bar{C}</div*> 
по правилам  <a href="#(31)">(31)</a>. Матрица <div* lang="latex">\bar{C}</div*> имеет вид
<br><br>
<div lang="latex" align="center">\left(\begin{array}{cccc} {0} & {6} & {0} & {3} \\ {13} & {0} & {5} & {4} \\ {4} & {3} & {0} & {0} \\ {0} & {9} & {2} & {13} \end{array}\right).</div>
<br> 

<br>
  &emsp;Переходим к шагу 2 с новой матрицей <div* lang="latex">\bar{C}</div*>. 

<br>
<br>
&emsp;<b>Шаг 2. </b> Сеть <div* lang="latex">S</div*>, соответствующая <div* lang="latex">\bar{C}</div*>, приведена на <a href="#pic4_5">рис. 4.5</a>.



<br><br>
<div align="center"> 
  <table width="100%" border="0">
    <tr> 
      <td> 
        <div align="center"><img id="pic4_5" src="../../images/lk4/img4_3/54.gif" width="448" border="0" align="absmiddle" alt=""></font></div>
        <br><br><center>Рис. 4.5</center>
      </td>
    </tr>
  </table>
</div>

<br>
  &emsp; На этом же рисунке приведен и максимальный поток. Величина этого потока равна <div* lang="latex">v^{0} =4=n</div*>. 
<br>
  &emsp;Используя правила <a href="#(29)">(29)</a> и найденный максимальный поток, определим оптимальное назначение:
<br>
<br>
<div lang="latex" align="center">x_{13}^{0} =1,{\rm \; \; }x_{22}^{0} =1,{\rm \; \; \; }x_{34}^{0} =1,{\rm \; \; \; }x_{41}^{0} =1,</div>
<br> 


<div lang="latex" align="center">x_{ij}^{0} =0,{\rm \; \; }i=\overline{1,n},{\rm \; \; }j=\overline{1,n}; \;\; (i,j)\in {\rm \{ }\, 
({\rm 1,\; 3}){\rm ,\; \; }({\rm 2,\; \; 2}){\rm ,\; }({\rm 3,\; 4}){\rm ,\; }({\rm 4,1)\; \} .}</div>
<br>


<br>
  &emsp;Таким образом, 3-й работник назначается на 1-ю работу, 2-й работник -- на 2-ю работу, 4-й работник -- на 3-ю работу и 1-й работник назначается на 4-ю работу.



  
  
  
  
  <br><br>
  	<p class="title"><a name="t4.4"><b>5.4 Задача коммивояжера</b></a></p>
    <p class="title"><a name="t4.4.1"><b>5.4.1. Постановка задачи</b></a></p>
	
	&emsp;ММатематическая модель задачи коммивояжера


<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(32)">
<div lang="latex" align="center">
\sum _{i=1}^{n}\sum _{j=1}^{n}c_{ij} x_{ij} \to \min   (c_{ii} =\infty ),    
</div>
 </td>
      <td width="2%">(32)</td>
    </tr>
  </table>

<br>

<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(33)">
<div align="center">
<div* lang="latex">\sum _{j=1}^{n}x_{ij} =1,\, \, i=\overline{1,n} </div*>  (отъезд из города  <div* lang="latex">i</div*>),    
</div>
 </td>
      <td width="2%">(33)</td>
    </tr>
  </table>

<br>


<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(34)">
<div align="center">
<div* lang="latex">\sum _{i=1}^{n}x_{ij} =1,\, \, j=\overline{1,n} </div*>  (прибытие в город  <div* lang="latex">j</div*>), 
</div>
 </td>
      <td width="2%">(34)</td>
    </tr>
  </table>

<br>





<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(35)">
<div lang="latex" align="center">
0\le x_{ij} \le 1,\, \, i=\overline{1,n};\, \, j=\overline{1,n},     
</div>
 </td>
      <td width="2%">(35)</td>
    </tr>
  </table>

<br>




<br>
  <table width="100%" border="0">
    <tr>
      <td width="98%"><img id="(36)">
<div align="center">
множество  <div* lang="latex">U_{*} =\{ (i,j):{\rm \; \; }i=\overline{1,n},{\rm \; \; }j=\overline{1,n};x_{ij} =1\} </div*> -- 
есть единственный цикл.
</div>
 </td>
      <td width="2%">(36)</td>
    </tr>
  </table>

<br>





Условие <a href="#(36)">(36)</a> отличает задачу коммивояжера от задачи о назначениях. Если отбросим <a href="#(36)">(36)</a>, т.е.
 будем рассматривать задачу <a href="#(32)">(32)</a> -- <a href="#(34)">(34)</a>, то получим задачу о назначениях. 

Равенство  <div* lang="latex">x_{ij} =1</div*> означает, что коммивояжер из города  <div* lang="latex">i</div*> идёт в город
  <div* lang="latex">j</div*>, равенство  <div* lang="latex">x_{ij} =0</div*> означает, что дуга  <div* lang="latex">(i,j)</div*> не включается в маршрут коммивояжера.

Существует много методов решения задачи <a href="#(32)">(32)</a>} -- <a href="#(36)">(36)</a>. 
Мы рассмотрим два метода, являющихся различными модификациями метода ветвей и границ.

  <br><br>
   <strong><a name="t4.4.2">5.4.2 Первая модификация (метод исключения 
  подциклов)</a></strong>
  
  
  <br>
  
  
  <br>&emsp;Эта модификация в наименьшей степени отличается от метода ветвей и границ, рассмотренного нами ранее. В начале итерации  <div* lang="latex">t</div*> 
известны верхняя граница (оценка)  <div* lang="latex">r_{0}^{t} </div*> оптимального значения целевой функции и соответствующий ей маршрут.
 Можно принять  <div* lang="latex">r_{0}^{1} </div*> равным достаточно большому числу, скажем, сумме  <div* lang="latex">(c_{12} +c_{23} +\ldots +c_{n1} ),</div*>
 соответствующей маршруту  <div* lang="latex">1\to 2\to 3\to \ldots \to n\to 1</div*>. 
<br>&emsp;Кроме того, имеется основной список, содержащий ряд задач о назначениях. Все задачи о назначениях имеют вид 
<a href="#(32)">(32)</a> -- <a href="#(35)">(35)</a>,
 но отличаются друг от друга тем, что в них различные величины  <div* lang="latex">c_{ij} </div*> равны  <div* lang="latex">\infty .</div*>
 Равенство  <div* lang="latex">c_{ij} =\infty </div*> означает, что дуга  <div* lang="latex">({i,j})</div*> исключается из маршрута.
<br>
<br>&emsp; На первой итерации основной список состоит из одной (исходной) задачи <a href="#(32)">(32)</a> -- <a href="#(35)">(35)</a>.

<br>
<br>&emsp; На итерации  <div* lang="latex">t</div*> выполняются следующие шаги.
<br>
<br>
<strong>&emsp;<i>Шаг 1.</i> </strong> Прекратим вычисления, если основной список пуст:
 зафиксированный маршрут является оптимальным. В противном случае выберем  одну задачу, вычеркнув её из основного списка.
<br>
<br>
<strong>&emsp;<i>Шаг 2.</i> </strong> Решим выбранную задачу о назначениях. 
Если оптимальное значение целевой функции (которое может быть равно  <div* lang="latex">\infty </div*>,
 что означает, что её ограничения несовместны!) больше или равно  <div* lang="latex">r_{0}^{t} </div*>, то оценку не меняем:
  <div* lang="latex">r_{0}^{t+1} =r_{0}^{t} </div*> и возвращаемся к шагу 1.
	В противном случае, т.е. если значение целевой функции задачи о назначениях меньше  <div* lang="latex">r_{0}^{t} </div*>, перейдём к шагу 3.

<br>
<br>
<strong>&emsp;<i>Шаг 3.</i> </strong> Если полученное оптимальное решение выбранной задачи
 о назначениях является одним циклом, то зафиксируем это решение и положим  <div* lang="latex">r_{0}^{t+1} </div*> 
равным оптимальному значению целевой функции рассматриваемой задачи о назначениях. Перейдем к шагу 1. В противном случае, т.е. 
если решение задачи о назначениях образует несколько подциклов,  перейдем к шагу 4.
<br>
<br>
  <strong>&emsp;<i>Шаг 4.</i> </strong>Остановимся в полученном оптимальном решении задачи о назначениях на подцикле,
содержащем минимальное количество дуг. Каждой дуге  <div* lang="latex">({i, j})</div*>
 из выбранного подцикла поставим в соответствие задачу о назначениях, внеся её в основной список и приняв соответствующее значение
  <div* lang="latex">c_{ij} =\infty </div*>, а все остальные коэффициенты оставим теми же, что и в задаче, выбранной на шаге 1. Примем  
	<div* lang="latex">r_{0}^{t+1} =r_{0}^{t} </div*> и вернемся к шагу 1.
	
	<br>
	<br>
	

<strong><a name="t4.4.3">&emsp;Пример 1. </a></strong>

<br>&emsp;Рассмотрим 
  задачу коммивояжера со следующей матрицей маршрутов:<br>
  <br>
  <br>
<div align="center"><img src="../../images/lk4/img4_4/10.gif" width="231" height="123" hspace="150" border="0" align="absmiddle" alt=""> 
  </div>
<br>

<br>
  &emsp;Дерево, соответствующее данному примеру приведено на <a href="#pic4_6">рис. 4.6</a>. <br>
  <br>
  <br>
  
<div align="center"><img id="pic4_6" src="../../images/lk4/img4_4/11.gif" width="538" hspace="50" border="0" align="absmiddle" alt=""> 
  <br>
  <br><center>Рис. 4.6</center>
  <br>
  <br>
  <br>
  </div>


<strong><a name="t4.4.4">5.4.4 Вторая модификация (метод 
  задания маршрутов)</a></strong>
  
  
  <br>
  
 <br>&emsp;Изложенный выше метод позволяет ограничить число просматриваемых вершин дерева в методе ветвей и границ, 
что достигается за счёт вычисления эффективной нижней оценки (границы) целевой функции для  любого цикла, 
порождаемого каждой задачей. Но для получения этой оценки приходится находить оптимальное решение задачи о назначениях.

<br>&emsp;Покажем теперь, как можно вычислять оценки более простым способом. Однако цена, которую приходится платить
 за такое упрощение, определяется тем, что в новом алгоритме нужно исследовать большее число ветвей соответствующего дерева.

<br>&emsp;В начале каждой итерации <div* lang="latex">t</div*> известна верхняя оценка <div* lang="latex">r_{0}^{t}</div*> оптимального значения целевой функции. Значение 
<div* lang="latex">r_{0}^{t} </div*> на первой итерации можно определить по тем же правилам, что и в предыдущем алгоритме. Кроме того, имеется 
основной список задач, в которых некоторое подмножество значений <div* lang="latex">c_{ij} </div*> изменено  и принято равным <div* lang="latex">\infty </div*>, 
а некоторое подмножество <div* lang="latex">x_{kp} </div*> принято равным 1. Среди значений <div* lang="latex">x_{kp} =1</div*> 
отсутствуют наборы, образующие подциклы. Отметим, что равенство <div* lang="latex">c_{ij} =\infty </div*> означает, что дуга <div* lang="latex">(i,j)<div*>
 исключается из маршрута, а равенство <div* lang="latex">x_{kp} =1</div*> означает, что дуга <div* lang="latex">(k,p)</div*> обязательно включается в маршрут.

<br>&emsp;На первой итерации основной список включает две задачи: в одной из них значение выбранного (выбираем произвольно) 
<div* lang="latex">c_{ij} </div*> изменено на <div* lang="latex">\infty </div*> (это означает, что маршрут <div* lang="latex">i\to j</div*> запрещён),
 в другой -- соответствующая переменная
 <div* lang="latex">x_{ij} =1</div*> (это означает, что маршрут <div* lang="latex">i\to j</div*> задан), а <div* lang="latex">c_{ji} =\infty </div*>
 (полагая <div* lang="latex">c_{ji} =\infty </div*>, 
запрещают маршрут <div* lang="latex">j\to i</div*>, предотвращая образование подцикла <div* lang="latex">i\to j\to i</div*>).

<br>&emsp;Рассмотрим любую задачу из основного списка и попытаемся вычислить для неё нижнюю оценку оптимального значения 
целевой функции для любого цикла, содержащего заданное подмножество дуг с <div* lang="latex">x_{ij} =1</div*>. Существует много способов
 вычисления таких оценок. В целом, чем больше нижняя оценка, тем меньшее число ветвей приходится исследовать.

<br>&emsp;Приведём один простой, но достаточно эффективный способ вычисления нижних границ. В основе этого способа лежат 
те же идеи, что использовались нами при обосновании венгерского метода решения задачи о назначениях. 
Прежде всего будем считать, что из матрицы <div* lang="latex">C=(c_{ij} ,{\rm \; \; }i=\overline{1,n};{\rm \; \; }j=\overline{1,n})</div*>, 
соответствующей рассматриваемой задаче, вычеркнуты строки <div* lang="latex">k</div*> и столбцы <div* lang="latex">p,</div*> если задано, что <div* lang="latex">x_{kp} =1</div*>. 
Ясно, что указанная оценка должна быть, по крайней мере, равной сумме <div* lang="latex">c_{ij} </div*> при заданных 
<div* lang="latex">x_{ij} =1</div*>, плюс сумма наименьших <div* lang="latex">c_{ij} </div*> в каждой из невычеркнутых строк.

<br>&emsp;Эту оценку можно (и должно) ещё увеличить. Для этого вычитается минимальный коэффициент <div* lang="latex">c_{ij} </div*> в каждой 
невычеркнутой строке из всех оставшихся <div* lang="latex">c_{ij} </div*> этой строки. Далее к полученной выше оценке добавляется сумма минимальных чисел, 
найденных в каждом невычеркнутом столбце среди «уменьшенных» расстояний.
<br>
<br>
<br>

<div align="justify"><strong><a name="t4.4.5">&emsp;Пример 2</a></strong>, иллюстрирующий эту процедуру, приведен в таблицах на <a href="#pic4_7">рис. 4.7</a>.<br>
  <br>
  </font></div>
  <center><img id="pic4_7" src="../../images/lk4/img4_4/16.gif" width="600" hspace="150" border="0" align="absmiddle" alt=""></center><br>
  
  <br><center>Рис. 4.7</center>
<br>
<br>
&emsp;Ясно, что самую «хорошую» нижнюю оценку мы бы получили, если бы решили до конца задачу о назначениях, 
соответствующую невычеркнутой части таблицы (вычеркнутая часть соответствует закреплённой части маршрута).
 Однако такая оценка потребовала бы значительных вычислительных затрат.

На итерации <div* lang="latex">t</div*> выполняются следующие шаги.
<br>
 <br>
&emsp;<strong><i>Шаг 1.</i> </strong> Прекратить вычисления, если основной список пуст:
 зафиксированный цикл является оптимальным маршрутом. В противном случае выбрать одну задачу и вычеркнуть её из основного списка. Перейти к шагу 2.
<br>

<br>
&emsp;<strong><i>Шаг 2.</i> </strong> Определить нижнюю оценку целевой функции для любого цикла, 
порождённого выбранной задачей. Если нижняя  оценка больше или равна <div* lang="latex">r_{0}^{t} </div*>, то положить 
<div* lang="latex">r_{0}^{t+1} =r_{0}^{t} </div*> и перейти к шагу 1. В противном случае перейти к шагу 3.
<br>
  <br>
&emsp;<strong><i>Шаг 3.</i> </strong> Если зафиксированные переменные <div* lang="latex">x_{ij} =1</div*> в выбранной задаче образуют
 один цикл, то зафиксируем его; положим <div* lang="latex">r_{0}^{t+1} </div*> равным длине полученного цикла; вернёмся к шагу 1. 
В противном случае (т.е. если дуги с <div* lang="latex">x_{ij} =1</div*> не образуют цикла) перейдём к шагу 4.
<br>
<br>
&emsp;<strong><i>Шаг 4.</i> </strong> Попытаемся найти такую дугу <div* lang="latex">(i_{0} ,j_{0} )</div*>:

<br>
&emsp;1) которая до текущего момента не принадлежала множеству дуг с фиксированными значениями <div* lang="latex">x_{ij} =1</div*>;

<br>
&emsp;2) для которой текущее <div* lang="latex">c_{i_{0} j_{0} } <\infty </div*>;

<br>
&emsp;3) во множестве дуг с фиксированными значениями нет дуг вида <div* lang="latex">(i,j_{0} ), {\rm \; \; }(i_{0} ,j);</div*>

<br>
&emsp;4) добавление дуги <div* lang="latex">(i_{0} ,j_{0} )</div*> ко множеству дуг <div* lang="latex">(i,j)</div*> с <div* lang="latex">x_{ij} =1</div*> 
не образует подцикла, т.е. цикла с количеством дуг меньше, чем <div* lang="latex">n</div*>. 

<br>
<br>
&emsp;Если удаётся найти такую дугу <div* lang="latex">(i_{0} ,j_{0} )</div*>, то в основной список вносим две новые задачи. 
Каждая из этих задач идентична задаче, выбранной на шаге 1, за исключением лишь того, что в одну из них надо внести изменение, положив 
<div* lang="latex">c_{i_{0} j_{0} } =\infty </div*>, в другую -- условие <div* lang="latex">x_{i_{0} j_{0} } =1</div*> и
 изменение <div* lang="latex">c_{j_{0} i_{0} } =\infty </div*>. Положим <div* lang="latex">r_{0}^{t+1} =r_{0}^{t} </div*> и вернёмся к шагу 1.


<br>
&emsp;Если дугу <div* lang="latex">(i_{0} ,j_{0} )</div*> с указанными свойствами найти не удалось, то ничего не вносим в список и переходим к шагу 1.
<br>
<br>
<br>
&emsp;Отметим два существенных отличия данного варианта алгоритма ветвей и границ от предыдущего. 
В данном варианте на шаге 2 вычисляется нижняя оценка для выбранной задачи, но <i>не отыскивается</i>
её оптимальное решение. Кроме того, на шаге 4 в основной список могут вноситься <i>две задачи</i>
 или не добавляется <i>ни одной</i>, если не существует переменной <div* lang="latex">x_{i_{0} j_{0} }</div*>, 
удовлетворяющей указанным условиям 1 -- 4. В предыдущей модификации на шаге 4 образуется от 2 до
 <div* lang="latex">{n \mathord{\left/{\vphantom{n 2}}\right.\kern-\nulldelimiterspace} 2} </div*> новых задач, вносимых в основной список.

 

<br>
<br>
<br>
</font>
<div align="justify"><strong><a name="t4.4.6">&emsp;Пример 3.</a></strong>
  Рассмотрим задачу коммивояжера с той же матрицей расстояний, что и в примере 
  1, т.е. с матрицей</font></div>
  <br>
<div align="center"><img src="../../images/lk4/img4_4/24.gif" width="226" height="123" hspace="150" border="0" align="absmiddle" alt=""> 
  </font></div>
<div align="justify"><br>
  &emsp;Ход решения данной задачи с помощью второй модификации отражен на <a href="#pic4_8">рис. 4.8</a>.<br>
  <br>
  </font></div>
<div align="center"><img id="pic4_8" src="../../images/lk4/img4_4/25.gif" width="500" hspace="50" border="0" align="absmiddle" alt=""> 
  </font> </div>
  <br><br><center>Рис. 4.8</center>
</div>
</div>
    <div title="Bottom">
        <p>&nbsp;</p>
        <hr size="2" width="100%" align="center">
        <h1 class="Bottom">
            <a href="../lk3/lk3.htm">[предыдущая тема]</a>
            <a href="../../theory.htm">[оглавление]</a>
            <a href="../lk5/lk5.htm">[следующая тема]</a>
        </h1>
    </div>
</body>
</html>